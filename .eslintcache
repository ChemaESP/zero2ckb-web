[{"/Users/retric/Desktop/ckb-react/src/router.tsx":"1","/Users/retric/Desktop/ckb-react/src/api/blockchain.ts":"2","/Users/retric/Desktop/ckb-react/src/components/widget/copy_text.tsx":"3","/Users/retric/Desktop/ckb-react/src/components/widget/fresh_button.tsx":"4","/Users/retric/Desktop/ckb-react/src/types/blockchain.ts":"5","/Users/retric/Desktop/ckb-react/src/components/widget/form.tsx":"6","/Users/retric/Desktop/ckb-react/src/components/widget/code.tsx":"7","/Users/retric/Desktop/ckb-react/src/components/widget/notify.tsx":"8","/Users/retric/Desktop/ckb-react/src/components/widget/common_style.ts":"9","/Users/retric/Desktop/ckb-react/src/index.tsx":"10","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/BeforeWeGetStarted.tsx":"11","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/PreKnowledge.tsx":"12","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/ShowChainInfo.tsx":"13","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/Class1.tsx":"14","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/SendTx.tsx":"15","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/FetchToSignMessage.tsx":"16","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/common/Wallets.tsx":"17","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/common/Cells.tsx":"18","/Users/retric/Desktop/ckb-react/src/components/tutorial/Learn.tsx":"19","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/Class3.tsx":"20","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/show_chain_info/new_blocks.tsx":"21","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/show_chain_info/WalletCells.tsx":"22","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/show_chain_info/ChainConfig.tsx":"23","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/Class2.tsx":"24","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/ToTxHash.tsx":"25","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/show_chain_info/WalletTransaction.tsx":"26","/Users/retric/Desktop/ckb-react/src/components/toolbox/tools/hex2decimal.tsx":"27","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/SeriliazedWitnessArgs.tsx":"28","/Users/retric/Desktop/ckb-react/src/reportWebVitals.ts":"29","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/Signer.tsx":"30","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/common/Blocks.tsx":"31","/Users/retric/Desktop/ckb-react/src/utils/index.ts":"32","/Users/retric/Desktop/ckb-react/src/components/widget/floating_cell/Fcell.jsx":"33","/Users/retric/Desktop/ckb-react/src/components/widget/floating_cell/cell_concept.jsx":"34","/Users/retric/Desktop/ckb-react/src/components/widget/data_grid.tsx":"35"},{"size":452,"mtime":1607498994651,"results":"36","hashOfConfig":"37"},{"size":2641,"mtime":1607485003205,"results":"38","hashOfConfig":"37"},{"size":2482,"mtime":1607522635692,"results":"39","hashOfConfig":"37"},{"size":3278,"mtime":1607599275585,"results":"40","hashOfConfig":"37"},{"size":3807,"mtime":1607005039964,"results":"41","hashOfConfig":"37"},{"size":1153,"mtime":1607064503407,"results":"42","hashOfConfig":"37"},{"size":1280,"mtime":1607522277794,"results":"43","hashOfConfig":"37"},{"size":352,"mtime":1607062893360,"results":"44","hashOfConfig":"37"},{"size":1293,"mtime":1607605597015,"results":"45","hashOfConfig":"37"},{"size":513,"mtime":1606567519013,"results":"46","hashOfConfig":"37"},{"size":2220,"mtime":1607499069013,"results":"47","hashOfConfig":"37"},{"size":21946,"mtime":1607576976012,"results":"48","hashOfConfig":"37"},{"size":2283,"mtime":1607595519397,"results":"49","hashOfConfig":"37"},{"size":7648,"mtime":1607576854340,"results":"50","hashOfConfig":"37"},{"size":1121,"mtime":1607499241918,"results":"51","hashOfConfig":"37"},{"size":1532,"mtime":1607499264934,"results":"52","hashOfConfig":"37"},{"size":5574,"mtime":1607595102277,"results":"53","hashOfConfig":"37"},{"size":1725,"mtime":1607499388137,"results":"54","hashOfConfig":"37"},{"size":866,"mtime":1607501468532,"results":"55","hashOfConfig":"37"},{"size":320,"mtime":1607499429435,"results":"56","hashOfConfig":"37"},{"size":1468,"mtime":1607602279721,"results":"57","hashOfConfig":"37"},{"size":2093,"mtime":1607595402451,"results":"58","hashOfConfig":"37"},{"size":786,"mtime":1607499583004,"results":"59","hashOfConfig":"37"},{"size":692,"mtime":1607499423419,"results":"60","hashOfConfig":"37"},{"size":1124,"mtime":1607499235334,"results":"61","hashOfConfig":"37"},{"size":2399,"mtime":1607499569891,"results":"62","hashOfConfig":"37"},{"size":1530,"mtime":1607499726111,"results":"63","hashOfConfig":"37"},{"size":862,"mtime":1607499260853,"results":"64","hashOfConfig":"37"},{"size":425,"mtime":1606564455869,"results":"65","hashOfConfig":"37"},{"size":1373,"mtime":1607499274285,"results":"66","hashOfConfig":"37"},{"size":4811,"mtime":1607518972810,"results":"67","hashOfConfig":"37"},{"size":271,"mtime":1607518778063,"results":"68","hashOfConfig":"37"},{"size":5643,"mtime":1607583915775,"results":"69","hashOfConfig":"37"},{"size":298,"mtime":1607577304894,"results":"70","hashOfConfig":"37"},{"size":1175,"mtime":1607588520854,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1x8qy3m",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"77"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"77"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"77"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"77"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"77"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"112"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"77"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},"/Users/retric/Desktop/ckb-react/src/router.tsx",[],["162","163"],"/Users/retric/Desktop/ckb-react/src/api/blockchain.ts",[],["164","165"],"/Users/retric/Desktop/ckb-react/src/components/widget/copy_text.tsx",["166"],"/Users/retric/Desktop/ckb-react/src/components/widget/fresh_button.tsx",["167"],"/Users/retric/Desktop/ckb-react/src/types/blockchain.ts",[],"/Users/retric/Desktop/ckb-react/src/components/widget/form.tsx",["168"],"import React, {useState, useEffect, useRef} from \"react\";\nimport CodePiece, { CodePieceType } from './code';\nimport FreshButton from './fresh_button';\n\nconst styles = {\n    form_box: {\n        border: '1px solid white',\n        padding: '20px',\n        overflow: 'scroll'\n    }\n}\n\nexport type Props = {\n    form_template: string\n    btn_text?: string\n    onSubmit?: (form_content: string) => void\n}\n\nexport default function Form(props: Props){\n    const [isLoading, setIsLoading] = useState(false);\n    const ref = useRef<CodePieceType>(null);\n    \n    const handleSubmit = function(){\n        setIsLoading(true);\n        console.log('here we go');\n        console.log(ref.current)\n        if(ref.current){\n            const data = ref.current.getContent();\n            if(props.onSubmit){\n                props.onSubmit(data);\n            }\n        }\n        setIsLoading(false);\n    }\n\n    return(\n      <div style={styles.form_box}>\n        <CodePiece code={props.form_template} isContentEditable={true} ref={ref}></CodePiece>\n        <FreshButton isLoading={isLoading} text={props.btn_text || '提交'} onClick={handleSubmit} />\n      </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/components/widget/code.tsx",["169"],"/Users/retric/Desktop/ckb-react/src/components/widget/notify.tsx",["170","171"],"import React, { useRef, useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function NotifyPlace(){\n    return(\n        <div>\n            <ToastContainer />\n        </div>\n    )\n}\n\nconst notify = (message: string) => {\n    toast(message);\n}\n\nexport { notify }","/Users/retric/Desktop/ckb-react/src/components/widget/common_style.ts",[],"/Users/retric/Desktop/ckb-react/src/index.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/BeforeWeGetStarted.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/PreKnowledge.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/ShowChainInfo.tsx",["172","173"],"import React, { useState } from 'react';\nimport Wallets from './common/Wallets';\nimport WalletTxs from './show_chain_info/WalletTransaction';\nimport ChainConfig from './show_chain_info/ChainConfig';\nimport WalletCells from './show_chain_info/WalletCells';\nimport NewBlocks from './show_chain_info/new_blocks';\nimport styles from '../../widget/common_style';\nimport type {\n    Wallet\n} from '../../../types/blockchain';\n\nexport default function(){\n    const [wallets, setWallets] = useState<Wallet[]>([]);\n\n    return(\n        <div>\n            <hr/>\n            <div style={styles.wide_card}>\n                <h1 style={styles.wide_card_title}>第二步：动手实践</h1>\n                <blockquote style={styles.blockquote}>\n                    我们在云端运行了一条测试链， \n                    并预先生成了一些账户地址，供你玩耍。\n                    <br/><br/>\n                    你可以在下面看到这条测试链的一些信息。\n                </blockquote>\n            </div>\n            <hr/>\n            \n            <NewBlocks></NewBlocks>\n\n            <div style={styles.clear_path}></div>\n            <div style={styles.content}>\n                \n                <p>这里有 3 个钱包。\n                    其中，钱包 1 是测试链的矿工地址。\n                    测试链只有一个矿工。</p>\n                <ul>\n                    <li>mainnet 表示主网地址，testnet 表示测试网地址，在这里我们只会用到 testnet。</li>\n                    <li>lock_arg 是钱包对应的公钥哈希的前20位，也是这个钱包拥有的 cell 中 lock 锁 args 字段的值: lock_arg = cell.lock.args</li>\n                    <li>lock_hash 是这个钱包拥有的 cell 中 lock 锁的哈希的前20位：lock_hash = hash(cell.lock) </li>\n                    <li>privateKey 是钱包的私钥，你不应该像我这样把它暴露出来。</li>\n                </ul>\n            </div>\n\n            <Wallets onFetchWallets={setWallets}></Wallets>\n\n            <div>\n                <WalletCells wallets={wallets}></WalletCells>\n            </div>\n            <div>\n                <p>这是测试链的配置信息：</p>\n                <ChainConfig />\n            </div>\n        </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/Class1.tsx",["174"],"import React, { useState } from 'react';\nimport styles from '../../widget/common_style';\nimport Form from '../../widget/form';\nimport Hex2Dec from '../../toolbox/tools/hex2decimal';\nimport {notify} from '../../widget/notify';\nimport CodePiece from '../../widget/code';\nimport ToSignMessage from './class_1/FetchToSignMessage';\nimport ToTxHash from './class_1/ToTxHash';\nimport Signer from './class_1/Signer';\nimport SendTx from './class_1/SendTx';\nimport SeriliazedWitnessArgs from './class_1/SeriliazedWitnessArgs';\n\nimport type {\n  Transaction,\n  RawTransaction\n} from '../../../types/blockchain'\n\nexport default function Class1(){\n\n    const [raw_tx, setRawTx] = useState<RawTransaction>();\n    const [complete_tx, setCompleteTx] = useState<Transaction>();\n    const raw_tx_template = `{\n      version: \"0x0\",\n      cell_deps: [\n        {\n          out_point: {\n            tx_hash:\n              \"0xace5ea83c478bb866edf122ff862085789158f5cbff155b7bb5f13058555b708\",\n            index: \"0x0\",\n          },\n          dep_type: \"dep_group\",\n        },\n      ],\n      header_deps: [],\n      inputs: [\n        {\n          since: \"0x0\",\n          previous_output: {\n            tx_hash:\n              \"0xc9d87fb5433d3655bdccea8a16386c202aeb72c2dcda4ad3528e8336deed3dcb\",\n            index: \"0x0\",\n          },\n        },\n      ],\n      outputs: [\n        {\n          capacity: \"0x124762461389\",\n          lock: {\n            code_hash:\n              \"0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8\",\n            hash_type: \"type\",\n            args: \"0x43d509d97f26007a285f39241cffcd411157196c\",\n          },\n        },\n      ],\n      outputs_data: [\"0x\"],\n      witnesses: [\"0x\"]\n}`;\n    /*\n    const raw_tx_template = `{\n        version: \"0x0\",\n        cell_deps: [\n          {\n            out_point: {\n              tx_hash:\n                \"...\",\n              index: \"...\",\n            },\n            dep_type: \"dep_group\",\n          },\n        ],\n        header_deps: [],\n        inputs: [\n          {\n            since: \"0x0\",\n            previous_output: {\n              tx_hash:\n                \"...\",\n              index: \"...\",\n            },\n          },\n        ],\n        outputs: [\n          {\n            capacity: \"...\",\n            lock: {\n              code_hash:\n                \"...\",\n              hash_type: \"...\",\n              args: \"...\",\n            },\n          },\n        ],\n        outputs_data: [\"0x\"]\n}`\n    */\n    const onRawTxSubmit = (content: string) => {\n        const raw_tx_content = JSON.parse(JSON.stringify(content));\n        setRawTx(raw_tx_content);\n        notify('raw_tx 已成功保存！')\n    }\n\n    const onCompleteTxSubmit = (content: string) => {\n        const tx_content = JSON.parse(JSON.stringify(content));\n        setCompleteTx(tx_content);\n        notify('tx 已成功保存！');\n    }\n\n    return(\n        <div>\n            <div style={styles.content}>\n                <h3 style={styles.main_color}>发送一笔交易</h3>\n                <p>发送一笔最基础的转账交易，流程是这样：</p>\n                <ul>\n                    <li>1、拼接交易的内容</li>\n                    <li>2、对交易进行签名</li>\n                    <li>3、把交易签名放回到交易中</li>\n                    <li>4、把交易发送到链上</li>\n                </ul>\n                <p>\n                    我们来逐一进行每个步骤。\n                </p>\n\n                <h4 style={styles.main_color}>1、拼接一个最简单的转账交易</h4>\n                <p>CKB 使用链下计算、链上确认的设计。所以我们完全可以用纯手工的方式来拼接一个交易，只要这个交易提交到链上能通过，那么交易就是有效的。</p>\n                <p>这里可以有一个非常有趣的例子，线下没网了两个人怎么做交易。</p>\n\n                <Form form_template={raw_tx_template} onSubmit={onRawTxSubmit} btn_text={'保存'}></Form>\n                <p>把上面的表格填满，然后点击提交。</p>\n\n                <p>当你在填写output的时候，可能对capacity应该填什么内容有点不清楚，这里是16进制的cell大小，10进制与16进制的互相转换可以使用这个小工具，应该能方便点。</p>\n                <Hex2Dec />\n\n                <h4 style={styles.main_color}>2、对交易进行签名</h4>\n\n                <p>好了，到这里你应该已经手动把交易全部填好了，接下来我们要准备对raw_tx进行签名了。</p>\n                <p>tx 跟 raw_tx 最大的不同是 tx 会在 witness 的字段里放入交易的签名。事实上你可以在witness里放入任何你需要的参数或者证明，\n                    但因为现在我们在尝试的是系统内建的转账交易，这种交易\b默认在witness里中放入这样一个结构：</p>\n                <CodePiece code={\n                    {\n                        lock: 'Script',\n                        input_type: 'Script',\n                        output_type: 'Script',\n                    }\n                } />\n                <p>\n                    其中，lock 字段是放入 lock 锁需要验证的签名。在我们现在要使用的普通转账交易中，就是 SECP256K1_BLAKE160 算法需要验证的签名。\n                    所以我们将会在 witness.lock 这里放入签名。\n                </p>\n                <p>\n                    witness是一个数组，所以可以放入多个证明。当进行 P2PKH 类型的签名时，需要在第一个位置放入签名，同时其他的位置则放入用户自己的witness。\n                    交易的签名过程分为这么几步：\n                </p>\n                <ul>\n                    <li>给witeness预留一个dummy_lock，长度65位</li>\n                    <li>把相同类型的锁分组</li>\n                </ul>\n                <h5 style={styles.main_color}>生成 message</h5>\n                <ul>\n                    <li>对每个类型的锁分别哈希</li>\n                    <li>哈希时，先哈希长度，再哈希实际内容</li>\n                    <li>最后生成哈希摘要信息，即待签名的message</li>\n                </ul>\n                <h5 style={styles.main_color}>生成交易哈希</h5>\n                <div>\n                    <ToTxHash raw_tx={raw_tx}></ToTxHash>\n                </div>\n                <hr/>\n                <ToSignMessage raw_tx={raw_tx} witnessArgs={[{lock:''}]}></ToSignMessage>\n\n                <h4 style={styles.main_color}>开始签名</h4>\n                <Signer></Signer>\n\n                <h4 style={styles.main_color}>3、把交易签名放回到交易中</h4>\n                <p>把生成的签名先做一遍序列化：</p>\n                <SeriliazedWitnessArgs></SeriliazedWitnessArgs>\n\n                <p>现在我们可以完善我们的交易了，把序列化好的签名放进witness字段里：</p>\n\n                { JSON.stringify(raw_tx) &&\n                    <Form form_template={ eval('`' + JSON.stringify(raw_tx).substring(1, JSON.stringify(raw_tx).length-1) + '`')} onSubmit={onCompleteTxSubmit} btn_text={'保存'}></Form>\n                }\n                <h4 style={styles.main_color}>4、把交易发送到链上</h4>\n                <p>好了，现在我们终于可以开始发交易了！</p>\n                <SendTx tx={complete_tx}></SendTx>\n                <p>注意看下，成功发上交易后查询下是不是有这个新的cell出来，然后对比下这个tx_hash 和之前生成的那个是不是一样的？</p>\n            </div>\n        </div>\n    )\n}\n","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/SendTx.tsx",["175"],"import React, {useState} from 'react';\nimport FreshButton from '../../../widget/fresh_button';\nimport { notify } from '../../../widget/notify';\nimport Api from '../../../../api/blockchain';\n\nimport type {\n    Transaction\n} from '../../../../types/blockchain';\n\nexport type Props = {\n    tx: Transaction | undefined\n}\n\nexport default function SendTx(props: Props){\n    const [isLoading, setIsLoading] = useState(false);\n    const [tx_hash, setTxHash] = useState('');\n\n    const sendTx = async () => {\n        setIsLoading(true);\n        const api = new Api();\n        if(props.tx){\n            const res = await api.sendTx(props.tx);\n            console.log(res);\n            if(res.status == 'ok'){\n                setTxHash(res.data);\n            }\n            else{\n                notify(res.data);\n            }\n        }else{\n            notify('transaction is undefined');\n        }\n        setIsLoading(false);\n    }\n\n    return(\n        <div>\n            <FreshButton isLoading={isLoading} text={'发送交易上链'} onClick={sendTx} ></FreshButton>\n            <p> tx_hash: {tx_hash}</p>\n        </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/FetchToSignMessage.tsx",["176","177"],"import React, {useState} from 'react';\nimport {\n    HexString,\n    WitnessArgs,\n    RawTransaction,\n    Cell,\n    Message\n} from '../../../../types/blockchain';\nimport FreshButton from '../../../widget/fresh_button';\nimport Api from '../../../../api/blockchain';\nimport {notify} from '../../../widget/notify';\n\nexport type Props = {\n    raw_tx: RawTransaction | undefined,\n    witnessArgs: WitnessArgs[],\n}\n\nexport default function FetchToSignMessage(props: Props){\n    const [isLoading, setIsLoading] = useState(false);\n    const [message, setMessage] = useState('');\n    const generateMessage = async () => {\n        setIsLoading(true);\n        if(props.raw_tx){\n            const api = new Api();\n            const result = await api.getToSignMessage(props.raw_tx, props.witnessArgs);\n            console.log(result, typeof result);\n            if(result.status === \"ok\"){\n                const msgs = result.data.map( (m: Message) => <li>{m.message}</li>);\n                setMessage(msgs);\n            }else{\n                notify(result.data);\n            }\n        }else{\n            notify('raw_tx is undefind.')\n        }\n        setIsLoading(false);\n    }\n    return(\n        <div>\n            <p>this will show the message generated to sign.</p>\n            <p>click the button below to start.</p>\n            <FreshButton isLoading={isLoading} text={'generate message'} onClick={generateMessage}></FreshButton>\n            <p>\n                the message to be signed: {message}\n            </p>\n        </div>\n    )\n}\n",["178","179"],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/common/Wallets.tsx",["180","181"],"import React, { useState, useEffect } from 'react';\nimport Api from '../../../../api/blockchain';\nimport type {\n    Wallet\n} from '../../../../types/blockchain';\nimport commonStyles from '../../../widget/common_style';\nimport CopyText from '../../../widget/copy_text';\nimport CodePiece from '../../../widget/code';\nimport { Typography, Container } from \"@material-ui/core\";\n\n\nconst wallet_arcii = `\n___________________________________\n|#######====================#######|\n|#(1)*     BANK of CKB *          #|\n|#**          /===\\\\   ********  **#|\n|*# {G}      | (\") |             #*|\n|#*  ******  | /v\\\\ |    O N E    *#|\n|#(1)         \\\\===/            (1)#|\n|##=========ONE WALLET===========##|\n------------------------------------\n                    `\nconst wallet_arcii_2 = `\n+----------+\n|          |\n|   CKB    |\n|  Wallet  |\n|          |\n+----------+\n                       `\nconst wallet_bottom = `\n+                               +\n+-------------------------------+\n`\nconst wallet_top= `\n+-------------------------------+\n+                               +\n`\n\nconst styles = {...commonStyles, ...{\n    wallet_section: {\n        border: '1px solid',\n        marginTop: '2em',\n        marginBottom: '2em'\n    },\n    wallets: {\n        marginTop: '20px',\n        marginBottom: '20px',\n    },\n    wallet_panel: {\n        maxWidth: '300px',\n        float: 'left' as const,\n        marginRight: '20px',\n        padding: '10px',\n        listStyleType: 'none',\n        overflow: 'hidden',\n        fontSize: '10px',\n        display: 'block',\n        textAlign: 'center' as const,\n        marginBottom: '5px'\n    },\n    alert_text: {\n        color:'red', \n        fontSize: '12px',\n        textAlign: 'center' as const\n    },\n    wallet_info: {\n        textAlign: 'center' as const\n    },\n    wallet_info_text: {\n        fontSize: '12px'\n    }\n  }\n};\n\nexport type WalletInfoProps = {\n    wallet: Wallet\n}\n\nexport function WalletInfo(props: WalletInfoProps){\n    const { wallet } = props;\n    const [isShowing, setIsShowing] = useState(false);\n\n    const toggle = () => {\n        setIsShowing(!isShowing);\n    }\n\n    const info = () => {\n        if(isShowing){\n            return (\n                <div style={styles.wallet_info}>\n                    <CodePiece custom_style={{border:'0px', marginTop:'0px', marginBottom:'0px'}} code={wallet_top}></CodePiece>\n                    <div style={styles.wallet_info_text}>\n                        <p><strong style={styles.main_color}>mainet: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</strong>\n                            { wallet.mainnet.slice(0, 8) }..{ wallet.mainnet.slice(wallet.mainnet.length-5) }   <CopyText text={wallet.mainnet} icon={true} /></p>\n                        <p><strong style={styles.main_color}>testnet: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</strong>\n                            { wallet.testnet.slice(0, 8) }..{ wallet.testnet.slice(wallet.testnet.length-5) }   <CopyText text={wallet.testnet} icon={true} /></p>\n                        <p><strong style={styles.main_color}>lock_arg: &#160;&#160;&#160;&#160;&#160;</strong>\n                            { wallet.lock_arg.slice(0, 8) }..{ wallet.lock_arg.slice(wallet.lock_arg.length-5) }   <CopyText text={wallet.lock_arg} icon={true} /></p>\n                        <p><strong style={styles.main_color}>private_key: </strong>\n                            { wallet.private_key.slice(0, 8) }..{ wallet.private_key.slice(wallet.private_key.length-5) }   <CopyText text={wallet.private_key} icon={true} /></p>\n                    </div>\n                    <CodePiece custom_style={{border:'0px', marginTop:'0px', marginBottom:'0px'}} code={wallet_bottom}></CodePiece>\n                </div>\n            )\n        }else{\n            return(\n                <CodePiece custom_style={{border:'0px', marginTop:'0px'}} code={wallet_arcii_2}></CodePiece>\n            )\n        }\n    }\n    return(\n        <div onMouseEnter={toggle} onMouseLeave={toggle}>\n            { info() }\n        </div>\n    )\n}\n\nexport type Props = {\n    wallet_id?: number\n    onFetchWallets?: (wallets: Wallet[]) => void\n}\n\nexport default function Wallets(props: Props){\n    const [wallets, setWallets] = useState([]);\n\n    useEffect(() => {   \n        fetchWallets();\n    }, []);\n    \n    async function fetchWallets() {\n        const api = new Api();\n        const myWallets = await api.getWallets();\n        setWallets( myWallets.map((wallet:Wallet, index:number) => {\n            return(\n            <li key={index} style={styles.wallet_panel}>\n                <Typography style={styles.main_color}> 钱包 {index + 1} </Typography>\n                <WalletInfo wallet={wallet}></WalletInfo>\n            </li>\n            )\n        }) );\n        if(props.onFetchWallets)\n            props.onFetchWallets(myWallets);\n    }\n\n    return (\n        <Container style={styles.wallet_section}>\n            <div style={styles.wallets}>\n                { props.wallet_id ?\n                    wallets[props.wallet_id-1] : wallets\n                } \n            </div>\n            <p style={{clear: \"both\"}} />\n            <br/>\n            <div style={styles.content}>\n                 <p style={styles.alert_text}> \n                 ☠️ 请勿在正式场合下使用这些钱包 <br/><br/>\n                    任何存入这些钱包的数字资产，\n                    都有可能会丢失、或被盗。<br/><br/>\n                    你不应该在任何情况下公开私钥。\n                </p>\n            </div>\n        </Container>\n    )\n}","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/common/Cells.tsx",["182"],"import React, { useEffect, useState } from \"react\";\nimport Api from \"../../../../api/blockchain\";\nimport type {\n    QueryOption,\n    Cell\n} from '../../../../types/blockchain';\nimport CodePiece from '../../../widget/code';\nimport FreshButton from '../../../widget/fresh_button';\n\nexport type Props = {\n    query: QueryOption\n    length?: number,\n    render_dep?: any\n};\n\nconst styles = {\n  main: {\n    textAlign: \"left\" as const,\n  },\n  cell_panel: {\n    width: \"600px\",\n    border: \"1px solid white\",\n    float: \"left\" as const,\n    marginRight: \"20px\",\n    padding: \"10px\",\n    listStyleType: \"none\",\n    overflow: \"hidden\",\n    fontSize: \"10px\",\n    display: \"block\",\n  },\n};\n\nexport default function Cells(props: Props) {\n  const [cells, setCells] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if(props.render_dep)\n      queryCells();\n  }, [props.render_dep]);\n\n  async function queryCells() {\n    setIsLoading(true);\n    console.log(isLoading);\n    const api = new Api();\n    const length = props.length || 10;\n    var myCells = await api.getLiveCells(props.query);\n    myCells = myCells.slice(0, length);\n    setCells(\n        myCells.map((cell: Cell, index: number) => {\n        return (\n          <li key={index} style={styles.cell_panel}>\n            <p>cell {index + 1} : </p>\n            <CodePiece code={ JSON.stringify(cell, null, 2) } />\n          </li>\n        );\n      })\n    );\n    setIsLoading(false);\n  }\n\n  return (\n    <div>\n      <p>\n          <FreshButton isLoading={isLoading} onClick={queryCells} text='刷新'></FreshButton>\n      </p>\n      <div style={styles.main}>\n        {cells}\n      </div>\n      <p style={{clear: \"both\"}} />\n    </div>\n  );\n}\n","/Users/retric/Desktop/ckb-react/src/components/tutorial/Learn.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/Class3.tsx",["183"],"import React from 'react';\nimport styles from '../../widget/common_style';\n\nexport default function(){\n    return(\n        <div>\n            <div style={styles.content}>\n                <h3 style={styles.main_color}>部署一个合约</h3>\n                <p>敬请期待。</p>\n            </div>\n        </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/show_chain_info/new_blocks.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/show_chain_info/WalletCells.tsx",["184","185"],"import React, { useState, useRef, useEffect } from 'react';\nimport Cells from '../common/Cells';\nimport WalletTxs from './WalletTransaction';\nimport type {\n    Wallet\n} from '../../../../types/blockchain'\nimport Select, { ActionMeta, OptionTypeBase, ValueType } from 'react-select';\n\n\nexport type Props = {\n    wallets: Wallet[]\n}\n\nexport type SelectWallet = {\n    value: string\n    label: string\n}\n\nconst styles = {\n    selection_area: {\n        color: 'black'\n    }\n}\n\nexport default function WalletCells( props: Props ){\n    const [wallets, setWallets] = useState<Wallet[]>([]);\n\n    useEffect(() => {\n        setWallets(props.wallets);\n    }, [props.wallets]);\n\n    const [selectedWallet, setSelectedWallet] = useState<string>();\n    const options = wallets.map((w, index) => {\n        return {\n            value: w.lock_arg,\n            label: '钱包' + (index + 1) + ': ' + w.lock_arg\n        }\n    });\n\n    const handlerSelectWallet = (value: ValueType<{\n        value: string;\n        label: string;\n    }, false>, actionMeta: ActionMeta<{\n        value: string;\n        label: string;\n    }>) => {\n        setSelectedWallet(value?.value);\n    }\n\n    return(\n        <div>\n            <p>请选择钱包</p>\n            <div style={styles.selection_area}>\n                <Select options={options} onChange={handlerSelectWallet} />\n            </div>\n            <p> {selectedWallet} 钱包对应的 live cell：</p>\n            <Cells query={{lock: {\n                code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n                args: selectedWallet || '',\n                hash_type: 'type'\n            }}} render_dep={selectedWallet}></Cells>\n            <div>\n                <p>这是钱包对应的交易: </p>\n                <WalletTxs query={{lock: {\n                    code_hash: '0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8',\n                    args: selectedWallet || '',\n                    hash_type: 'type'\n                }}} render_dep={selectedWallet}></WalletTxs>\n            </div>\n        </div>\n    )\n}\n","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/show_chain_info/ChainConfig.tsx",[],["186","187"],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/Class2.tsx",["188"],"import React from 'react';\nimport styles from '../../widget/common_style';\n\nexport default function(){\n    return(\n        <div>\n            <div style={styles.content}>\n                <h3 style={styles.main_color}>发送多签交易</h3>\n                <p>敬请期待。</p>\n            </div>\n        </div>\n    )\n}\n\n                /** \n                 <ul>\n                    <li>0、学习多签脚本</li>\n                    <li>1、拼接交易的内容</li>\n                    <li>2、对交易进行签名</li>\n                    <li>3、把交易签名放回到交易中</li>\n                    <li>4、把交易发送到链上</li>\n                </ul>\n                */","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/ToTxHash.tsx",["189"],"import React, { useState } from 'react';\nimport Api from '../../../../api/blockchain';\nimport {\n    RawTransaction,\n} from '../../../../types/blockchain';\nimport FreshButton from '../../../widget/fresh_button';\nimport { notify } from '../../../widget/notify';\n\nconst styles = {\n    result: {\n        width: '100%',\n        padding: '10px'\n    }\n}\n\nexport type Props = {\n    raw_tx: RawTransaction | undefined\n}\n\nexport default function ToTxHash(props: Props){\n    const [hash, setHash] = useState('');\n\n    const generateTxHash = async () => {\n        const api = new Api();\n        if(props.raw_tx){\n            const res = await api.generateTxHash(props.raw_tx);\n            if(res.status == 'ok'){\n                setHash(res.data);\n            }\n            else{\n                notify(res.data);\n            }\n        }else{\n            notify('raw transaction is undefined');\n        }\n    }\n\n    return(\n        <div style={styles.result}>\n            <FreshButton text={'生成交易的哈希'} onClick={generateTxHash} />\n            <div >\n                结果：{hash}\n            </div>\n        </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/show_chain_info/WalletTransaction.tsx",["190"],"import React, { useState, useEffect } from 'react';\nimport Api from '../../../../api/blockchain';\nimport { QueryOption } from '../../../../types/blockchain';\nimport FreshButton from \"../../../widget/fresh_button\";\nimport commonStyles from \"../../../widget/common_style\";\nimport {\n    TransactionWithStatus\n} from \"../../../../types/blockchain\";\nimport CodePiece from '../../../widget/code';\n\nconst styles = {...commonStyles, ...{\n    list_panel: {\n        margin: '20px',\n    },\n    tx_panel: {\n        width: \"600px\",\n        border: \"1px solid white\",\n        float: \"left\" as const,\n        marginRight: \"20px\",\n        padding: \"10px\",\n        listStyleType: \"none\",\n        overflow: \"scroll\",\n        fontSize: \"10px\",\n        display: \"block\",\n        textAlign: 'left' as const\n    },\n}};\n\nexport type Props = {\n    query: QueryOption,\n    render_dep?: any,\n    length?: number\n}\n\nexport default function WalletTransaction(props: Props){\n    \n    const [txs, setTxs] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    \n    async function fetchTransactions() {\n        setIsLoading(true);\n        const api = new Api();\n        const length = props.length || 10;\n        var txs = await api.getTransactions(props.query);\n        txs = txs.slice(0, length);\n        setTxs(txs.map((tx:TransactionWithStatus, index:number) => <li key={index} style={styles.tx_panel}>\n            <CodePiece code={JSON.stringify(tx, null, 2)} />\n        </li>));\n        setIsLoading(false);\n    }\n\n    useEffect(()=>{\n        if(props.render_dep)\n            fetchTransactions();\n    }, [props.render_dep])\n\n    return(\n        <div style={styles.list_panel}>\n            <p>\n               <FreshButton isLoading={isLoading} onClick={fetchTransactions} text='刷新'></FreshButton>\n            </p>\n           {txs}\n           <p style={{clear: \"both\"}} />\n        </div>\n    )\n}\n\n\n/**   \n * \n * {\n[1]     transaction: {\n[1]       cell_deps: [],\n[1]       hash: '0xac10b54d29cb66c0484faf1e6b1eb1cea4a481c21f1758e82ed6040db1cacfac',\n[1]       header_deps: [],\n[1]       inputs: [Array],\n[1]       outputs: [Array],\n[1]       outputs_data: [Array],\n[1]       version: '0x0',\n[1]       witnesses: [Array]\n[1]     },\n[1]     tx_status: {\n[1]       block_hash: '0x21822a9bc055a6223f45c3311a5802b837e7b441f0e9497d0758d8b29a8e8d9e',\n[1]       status: 'committed'\n[1]     }\n[1]   },\n * \n * \n */","/Users/retric/Desktop/ckb-react/src/components/toolbox/tools/hex2decimal.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/SeriliazedWitnessArgs.tsx",["191"],"import React, {useState} from 'react';\nimport { notify } from '../../../widget/notify';\nimport Api from '../../../../api/blockchain';\nimport Form from '../../../widget/form';\n\nexport default function SeriliazedWitnessArgs(){\n    const [witness, setWitness] = useState('');\n\n    const form_template = `{\n        lock: \"...\"\n    }`\n\n    const seriliazed_witness = async (witnessArgs: string) => {\n        const api = new Api();\n        const res = await api.getSeriliazedWitness(witnessArgs);\n        console.log(res);\n        if(res.status == 'ok'){\n            setWitness(res.data);\n        }\n        else{\n            notify(res.data);\n        }\n    }\n\n    return(\n        <div>\n            <Form form_template={form_template} onSubmit={seriliazed_witness} btn_text={'序列化witnessArgs'}></Form>\n            <p> witness: {witness}</p>\n        </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/reportWebVitals.ts",[],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/class_1/Signer.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/tutorial/sections/common/Blocks.tsx",[],"/Users/retric/Desktop/ckb-react/src/utils/index.ts",["192"],"const convertTimestamp = (ts: string | number) => {\n    if(typeof ts === 'string'){\n        return new Date(parseInt(ts)).toLocaleTimeString();\n    }else{\n        return new Date(ts).toLocaleTimeString();\n    }\n}\n\nexport default {\n    convertTimestamp: convertTimestamp\n}","/Users/retric/Desktop/ckb-react/src/components/widget/floating_cell/Fcell.jsx",["193"],"/Users/retric/Desktop/ckb-react/src/components/widget/floating_cell/cell_concept.jsx",[],"/Users/retric/Desktop/ckb-react/src/components/widget/data_grid.tsx",["194","195"],"import React from 'react';\nimport { CSSProperties } from '@material-ui/core/styles/withStyles';\n\nexport type ColDef = {\n    id: string\n    label: string\n    width?: string\n    type?: any\n}\n\nexport type RowModel = {\n    id: string\n    value: string\n    type?: any\n}\n\n\nexport type SimpleDataGridProp = {\n    columns: ColDef[]\n    rows: RowModel[]\n    custom_style?: CSSProperties\n}\n\nconst default_style = {\n    width: '100%',\n    height: '400px'\n}\n\nexport function DataGrid (props: SimpleDataGridProp){\n    const styles = {\n        header: {\n            textAlign: 'center' as const,\n            border: '1px solid'\n        }\n    }\n    const {columns, rows} = props;\n    const headers = columns.map( (col: ColDef) => (\n        <span style={ {...styles.header, ...{width: col.width??''}} }> {col.label}  </span>\n    ) );\n    return(\n        <div>\n            <div> \n            </div>\n        </div>\n    )\n}\n\nexport default function SimpleDataGrid(props: SimpleDataGridProp) {\n  const {columns, rows, custom_style} = props;\n  const style = {...default_style, ...custom_style};\n  return (\n    <div style={style}>\n      <DataGrid rows={rows} columns={columns}/>\n    </div>\n  );\n}\n",{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"196","replacedBy":"200"},{"ruleId":"198","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":20,"column":25,"nodeType":"204","messageId":"205","endLine":20,"endColumn":39},{"ruleId":"202","severity":1,"message":"206","line":7,"column":37,"nodeType":"204","messageId":"205","endLine":7,"endColumn":43},{"ruleId":"202","severity":1,"message":"207","line":1,"column":26,"nodeType":"204","messageId":"205","endLine":1,"endColumn":35},{"ruleId":"202","severity":1,"message":"208","line":1,"column":62,"nodeType":"204","messageId":"205","endLine":1,"endColumn":70},{"ruleId":"202","severity":1,"message":"206","line":1,"column":17,"nodeType":"204","messageId":"205","endLine":1,"endColumn":23},{"ruleId":"202","severity":1,"message":"208","line":1,"column":25,"nodeType":"204","messageId":"205","endLine":1,"endColumn":33},{"ruleId":"202","severity":1,"message":"209","line":3,"column":8,"nodeType":"204","messageId":"205","endLine":3,"endColumn":17},{"ruleId":"210","severity":1,"message":"211","line":12,"column":1,"nodeType":"212","endLine":56,"endColumn":2},{"ruleId":"213","severity":1,"message":"214","line":181,"column":43,"nodeType":"215","messageId":"216","endLine":181,"endColumn":47},{"ruleId":"217","severity":1,"message":"218","line":24,"column":27,"nodeType":"219","messageId":"216","endLine":24,"endColumn":29},{"ruleId":"202","severity":1,"message":"220","line":3,"column":5,"nodeType":"204","messageId":"205","endLine":3,"endColumn":14},{"ruleId":"202","severity":1,"message":"221","line":6,"column":5,"nodeType":"204","messageId":"205","endLine":6,"endColumn":9},{"ruleId":"196","replacedBy":"222"},{"ruleId":"198","replacedBy":"223"},{"ruleId":"202","severity":1,"message":"224","line":12,"column":7,"nodeType":"204","messageId":"205","endLine":12,"endColumn":19},{"ruleId":"225","severity":1,"message":"226","line":129,"column":8,"nodeType":"227","endLine":129,"endColumn":10,"suggestions":"228"},{"ruleId":"225","severity":1,"message":"229","line":40,"column":6,"nodeType":"227","endLine":40,"endColumn":24,"suggestions":"230"},{"ruleId":"210","severity":1,"message":"211","line":4,"column":1,"nodeType":"212","endLine":13,"endColumn":2},{"ruleId":"202","severity":1,"message":"206","line":1,"column":27,"nodeType":"204","messageId":"205","endLine":1,"endColumn":33},{"ruleId":"202","severity":1,"message":"231","line":7,"column":30,"nodeType":"204","messageId":"205","endLine":7,"endColumn":44},{"ruleId":"196","replacedBy":"232"},{"ruleId":"198","replacedBy":"233"},{"ruleId":"210","severity":1,"message":"211","line":4,"column":1,"nodeType":"212","endLine":13,"endColumn":2},{"ruleId":"217","severity":1,"message":"218","line":27,"column":27,"nodeType":"219","messageId":"216","endLine":27,"endColumn":29},{"ruleId":"225","severity":1,"message":"234","line":55,"column":8,"nodeType":"227","endLine":55,"endColumn":26,"suggestions":"235"},{"ruleId":"217","severity":1,"message":"218","line":17,"column":23,"nodeType":"219","messageId":"216","endLine":17,"endColumn":25},{"ruleId":"210","severity":1,"message":"236","line":9,"column":1,"nodeType":"212","endLine":11,"endColumn":2},{"ruleId":"237","severity":1,"message":"238","line":62,"column":9,"nodeType":"204","messageId":"205","endLine":62,"endColumn":10},{"ruleId":"202","severity":1,"message":"239","line":36,"column":21,"nodeType":"204","messageId":"205","endLine":36,"endColumn":25},{"ruleId":"202","severity":1,"message":"240","line":37,"column":11,"nodeType":"204","messageId":"205","endLine":37,"endColumn":18},"no-native-reassign",["241"],"no-negated-in-lhs",["242"],["241"],["242"],"@typescript-eslint/no-unused-vars","'setPlaceholder' is assigned a value but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'WalletTxs' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-eval","eval can be harmful.","CallExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'HexString' is defined but never used.","'Cell' is defined but never used.",["241"],["242"],"'wallet_arcii' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchWallets'. Either include it or remove the dependency array.","ArrayExpression",["243"],"React Hook useEffect has a missing dependency: 'queryCells'. Either include it or remove the dependency array.",["244"],"'OptionTypeBase' is defined but never used.",["241"],["242"],"React Hook useEffect has a missing dependency: 'fetchTransactions'. Either include it or remove the dependency array.",["245"],"Assign object to a variable before exporting as module default","no-unused-vars","'j' is assigned a value but never used.","'rows' is assigned a value but never used.","'headers' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},"Update the dependencies array to be: [fetchWallets]",{"range":"252","text":"253"},"Update the dependencies array to be: [props.render_dep, queryCells]",{"range":"254","text":"255"},"Update the dependencies array to be: [fetchTransactions, props.render_dep]",{"range":"256","text":"257"},[4298,4300],"[fetchWallets]",[892,910],"[props.render_dep, queryCells]",[1599,1617],"[fetchTransactions, props.render_dep]"]