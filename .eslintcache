[{"/Users/retric/Desktop/ckb-react/src/router.tsx":"1","/Users/retric/Desktop/ckb-react/src/components/PreKnowledge.tsx":"2","/Users/retric/Desktop/ckb-react/src/components/BeforeWeGetStarted.tsx":"3","/Users/retric/Desktop/ckb-react/src/components/ShowChainInfo.tsx":"4","/Users/retric/Desktop/ckb-react/src/api/blockchain.ts":"5","/Users/retric/Desktop/ckb-react/src/components/Class1.tsx":"6","/Users/retric/Desktop/ckb-react/src/components/Wallets.tsx":"7","/Users/retric/Desktop/ckb-react/src/components/Cells.tsx":"8","/Users/retric/Desktop/ckb-react/src/components/Transaction.tsx":"9","/Users/retric/Desktop/ckb-react/src/components/widget/copy_text.tsx":"10","/Users/retric/Desktop/ckb-react/src/components/widget/fresh_button.tsx":"11","/Users/retric/Desktop/ckb-react/src/types/blockchain.ts":"12","/Users/retric/Desktop/ckb-react/src/components/widget/form.tsx":"13","/Users/retric/Desktop/ckb-react/src/components/widget/code.tsx":"14","/Users/retric/Desktop/ckb-react/src/components/widget/notify.tsx":"15","/Users/retric/Desktop/ckb-react/src/components/Learn.tsx":"16","/Users/retric/Desktop/ckb-react/src/components/widget/common_style.ts":"17","/Users/retric/Desktop/ckb-react/src/components/ChainConfig.tsx":"18","/Users/retric/Desktop/ckb-react/src/components/widget/hex2decimal.tsx":"19","/Users/retric/Desktop/ckb-react/src/index.tsx":"20","/Users/retric/Desktop/ckb-react/src/components/Class4.tsx":"21","/Users/retric/Desktop/ckb-react/src/components/WalletCells.tsx":"22","/Users/retric/Desktop/ckb-react/src/components/ToTxHash.tsx":"23","/Users/retric/Desktop/ckb-react/src/components/FetchToSignMessage.tsx":"24","/Users/retric/Desktop/ckb-react/src/components/Signer.tsx":"25","/Users/retric/Desktop/ckb-react/src/components/SendTx.tsx":"26","/Users/retric/Desktop/ckb-react/src/components/SeriliazedWitnessArgs.tsx":"27"},{"size":443,"mtime":1606571252247,"results":"28","hashOfConfig":"29"},{"size":22011,"mtime":1606984025107,"results":"30","hashOfConfig":"29"},{"size":2216,"mtime":1606983792837,"results":"31","hashOfConfig":"29"},{"size":2548,"mtime":1607340288151,"results":"32","hashOfConfig":"29"},{"size":2425,"mtime":1607434060599,"results":"33","hashOfConfig":"29"},{"size":7575,"mtime":1607434138445,"results":"34","hashOfConfig":"29"},{"size":2628,"mtime":1607416235292,"results":"35","hashOfConfig":"29"},{"size":1693,"mtime":1607339536988,"results":"36","hashOfConfig":"29"},{"size":2213,"mtime":1607005512552,"results":"37","hashOfConfig":"29"},{"size":2392,"mtime":1607062901937,"results":"38","hashOfConfig":"29"},{"size":2372,"mtime":1607062025552,"results":"39","hashOfConfig":"29"},{"size":3807,"mtime":1607005039964,"results":"40","hashOfConfig":"29"},{"size":1153,"mtime":1607064503407,"results":"41","hashOfConfig":"29"},{"size":1045,"mtime":1607060499215,"results":"42","hashOfConfig":"29"},{"size":352,"mtime":1607062893360,"results":"43","hashOfConfig":"29"},{"size":758,"mtime":1607062976270,"results":"44","hashOfConfig":"29"},{"size":811,"mtime":1606961388167,"results":"45","hashOfConfig":"29"},{"size":770,"mtime":1607064356959,"results":"46","hashOfConfig":"29"},{"size":1530,"mtime":1607067259765,"results":"47","hashOfConfig":"29"},{"size":513,"mtime":1606567519013,"results":"48","hashOfConfig":"29"},{"size":328,"mtime":1606917954135,"results":"49","hashOfConfig":"29"},{"size":1769,"mtime":1607397317027,"results":"50","hashOfConfig":"29"},{"size":1256,"mtime":1607407140624,"results":"51","hashOfConfig":"29"},{"size":1500,"mtime":1607414989914,"results":"52","hashOfConfig":"29"},{"size":1345,"mtime":1607430791778,"results":"53","hashOfConfig":"29"},{"size":1089,"mtime":1607432260685,"results":"54","hashOfConfig":"29"},{"size":839,"mtime":1607434081444,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x8qy3m",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/retric/Desktop/ckb-react/src/router.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/PreKnowledge.tsx",[],["119","120"],"/Users/retric/Desktop/ckb-react/src/components/BeforeWeGetStarted.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/ShowChainInfo.tsx",["121"],"/Users/retric/Desktop/ckb-react/src/api/blockchain.ts",[],"/Users/retric/Desktop/ckb-react/src/components/Class1.tsx",["122"],"import React, { useState } from 'react';\nimport styles from './widget/common_style';\nimport Form from './widget/form';\nimport Hex2Dec from './widget/hex2decimal';\nimport {notify} from './widget/notify';\nimport CodePiece from './widget/code';\nimport ToSignMessage from './FetchToSignMessage';\nimport ToTxHash from './ToTxHash';\nimport Signer from './Signer';\nimport SendTx from './SendTx';\nimport SeriliazedWitnessArgs from './SeriliazedWitnessArgs';\n\nimport type {\n  Transaction,\n  RawTransaction\n} from '../types/blockchain'\n\nexport default function Class1(){\n\n    const [raw_tx, setRawTx] = useState<RawTransaction>();\n    const [complete_tx, setCompleteTx] = useState<Transaction>();\n    const raw_tx_template = `{\n      version: \"0x0\",\n      cell_deps: [\n        {\n          out_point: {\n            tx_hash:\n              \"0xace5ea83c478bb866edf122ff862085789158f5cbff155b7bb5f13058555b708\",\n            index: \"0x0\",\n          },\n          dep_type: \"dep_group\",\n        },\n      ],\n      header_deps: [],\n      inputs: [\n        {\n          since: \"0x0\",\n          previous_output: {\n            tx_hash:\n              \"0xc9d87fb5433d3655bdccea8a16386c202aeb72c2dcda4ad3528e8336deed3dcb\",\n            index: \"0x0\",\n          },\n        },\n      ],\n      outputs: [\n        {\n          capacity: \"0x124762461389\",\n          lock: {\n            code_hash:\n              \"0x9bd7e06f3ecf4be0f2fcd2188b23f1b9fcc88e5d4b65a8637b17723bbda3cce8\",\n            hash_type: \"type\",\n            args: \"0x43d509d97f26007a285f39241cffcd411157196c\",\n          },\n        },\n      ],\n      outputs_data: [\"0x\"],\n      witnesses: [\"0x\"]\n}`;\n    /*\n    const raw_tx_template = `{\n        version: \"0x0\",\n        cell_deps: [\n          {\n            out_point: {\n              tx_hash:\n                \"...\",\n              index: \"...\",\n            },\n            dep_type: \"dep_group\",\n          },\n        ],\n        header_deps: [],\n        inputs: [\n          {\n            since: \"0x0\",\n            previous_output: {\n              tx_hash:\n                \"...\",\n              index: \"...\",\n            },\n          },\n        ],\n        outputs: [\n          {\n            capacity: \"...\",\n            lock: {\n              code_hash:\n                \"...\",\n              hash_type: \"...\",\n              args: \"...\",\n            },\n          },\n        ],\n        outputs_data: [\"0x\"]\n}`\n    */\n    const onRawTxSubmit = (content: string) => {\n        const raw_tx_content = JSON.parse(JSON.stringify(content));\n        setRawTx(raw_tx_content);\n        notify('raw_tx 已成功保存！')\n    }\n\n    const onCompleteTxSubmit = (content: string) => {\n        const tx_content = JSON.parse(JSON.stringify(content));\n        setCompleteTx(tx_content);\n        notify('tx 已成功保存！');\n    }\n\n    return(\n        <div>\n            <div style={styles.content}>\n                <h3 style={styles.main_color}>发送一笔交易</h3>\n                <p>发送一笔最基础的转账交易，流程是这样：</p>\n                <ul>\n                    <li>1、拼接交易的内容</li>\n                    <li>2、对交易进行签名</li>\n                    <li>3、把交易签名放回到交易中</li>\n                    <li>4、把交易发送到链上</li>\n                </ul>\n                <p>\n                    我们来逐一进行每个步骤。\n                </p>\n\n                <h4 style={styles.main_color}>1、拼接一个最简单的转账交易</h4>\n                <p>CKB 使用链下计算、链上确认的设计。所以我们完全可以用纯手工的方式来拼接一个交易，只要这个交易提交到链上能通过，那么交易就是有效的。</p>\n                <p>这里可以有一个非常有趣的例子，线下没网了两个人怎么做交易。</p>\n\n                <Form form_template={raw_tx_template} onSubmit={onRawTxSubmit} btn_text={'保存'}></Form>\n                <p>把上面的表格填满，然后点击提交。</p>\n\n                <p>当你在填写output的时候，可能对capacity应该填什么内容有点不清楚，这里是16进制的cell大小，10进制与16进制的互相转换可以使用这个小工具，应该能方便点。</p>\n                <Hex2Dec />\n\n                <h4 style={styles.main_color}>2、对交易进行签名</h4>\n\n                <p>好了，到这里你应该已经手动把交易全部填好了，接下来我们要准备对raw_tx进行签名了。</p>\n                <p>tx 跟 raw_tx 最大的不同是 tx 会在 witness 的字段里放入交易的签名。事实上你可以在witness里放入任何你需要的参数或者证明，\n                    但因为现在我们在尝试的是系统内建的转账交易，这种交易\b默认在witness里中放入这样一个结构：</p>\n                <CodePiece code={\n                    {\n                        lock: 'Script',\n                        input_type: 'Script',\n                        output_type: 'Script',\n                    }\n                } />\n                <p>\n                    其中，lock 字段是放入 lock 锁需要验证的签名。在我们现在要使用的普通转账交易中，就是 SECP256K1_BLAKE160 算法需要验证的签名。\n                    所以我们将会在 witness.lock 这里放入签名。\n                </p>\n                <p>\n                    witness是一个数组，所以可以放入多个证明。当进行 P2PKH 类型的签名时，需要在第一个位置放入签名，同时其他的位置则放入用户自己的witness。\n                    交易的签名过程分为这么几步：\n                </p>\n                <ul>\n                    <li>给witeness预留一个dummy_lock，长度65位</li>\n                    <li>把相同类型的锁分组</li>\n                </ul>\n                <h5 style={styles.main_color}>生成 message</h5>\n                <ul>\n                    <li>对每个类型的锁分别哈希</li>\n                    <li>哈希时，先哈希长度，再哈希实际内容</li>\n                    <li>最后生成哈希摘要信息，即待签名的message</li>\n                </ul>\n                <h5 style={styles.main_color}>生成交易哈希</h5>\n                <div>\n                    <ToTxHash raw_tx={raw_tx}></ToTxHash>\n                </div>\n                <hr/>\n                <ToSignMessage raw_tx={raw_tx} witnessArgs={[{lock:''}]}></ToSignMessage>\n\n                <h4 style={styles.main_color}>开始签名</h4>\n                <Signer></Signer>\n\n                <h4 style={styles.main_color}>3、把交易签名放回到交易中</h4>\n                <p>把生成的签名先做一遍序列化：</p>\n                <SeriliazedWitnessArgs></SeriliazedWitnessArgs>\n\n                <p>现在我们可以完善我们的交易了，把序列化好的签名放进witness字段里：</p>\n\n                { JSON.stringify(raw_tx) &&\n                    <Form form_template={ eval('`' + JSON.stringify(raw_tx).substring(1, JSON.stringify(raw_tx).length-1) + '`')} onSubmit={onCompleteTxSubmit} btn_text={'保存'}></Form>\n                }\n                <h4 style={styles.main_color}>4、把交易发送到链上</h4>\n                <p>好了，现在我们终于可以开始发交易了！</p>\n                <SendTx tx={complete_tx}></SendTx>\n                <p>注意看下，成功发上交易后查询下是不是有这个新的cell出来，然后对比下这个tx_hash 和之前生成的那个是不是一样的？</p>\n            </div>\n        </div>\n    )\n}\n","/Users/retric/Desktop/ckb-react/src/components/Wallets.tsx",["123"],"import React, { useState, useEffect } from 'react';\nimport Api from '../api/blockchain';\nimport type {\n    Wallet\n} from '../types/blockchain';\nimport commonStyles from './widget/common_style';\nimport CopyText from './widget/copy_text';\n\nconst styles = {...commonStyles, ...{\n    wallets: {\n        marginTop: '20px',\n        marginBottom: '20px',\n    },\n    wallet_panel: {\n        width: '400px',\n        border: '1px solid white',\n        float: 'left' as const,\n        marginRight: '20px',\n        padding: '10px',\n        listStyleType: 'none',\n        overflow: 'hidden',\n        fontSize: '10px',\n        display: 'block',\n        textAlign: 'left' as const\n    },\n    alert_text: {\n        color:'red', \n        textAlign: 'center' as const\n    }\n  }\n};\n\nexport type Props = {\n    wallet_id?: number\n    onFetchWallets?: (wallets: Wallet[]) => void\n}\n\nexport default function Wallets(props: Props){\n    const [wallets, setWallets] = useState([]);\n\n    useEffect(() => {   \n        fetchWallets();\n    }, []);\n    \n    async function fetchWallets() {\n        const api = new Api();\n        const myWallets = await api.getWallets();\n        setWallets( myWallets.map((wallet:Wallet, index:number) => {\n            return(\n            <li key={index} style={styles.wallet_panel}>\n                <p style={styles.main_color}>钱包 {index + 1} : </p>\n                <p>mainet: { wallet.mainnet }   <CopyText text={wallet.mainnet} icon={true} /></p>\n                <p>testnet: { wallet.testnet }   <CopyText text={wallet.testnet} icon={true} /></p>\n                <p>lock_arg: { wallet.lock_arg }   <CopyText text={wallet.lock_arg} icon={true} /></p>\n                <p>lock_hash: { wallet.lock_hash }   <CopyText text={wallet.lock_hash} icon={true} /></p>\n                <p>private_key: { wallet.private_key }   <CopyText text={wallet.private_key} icon={true} /></p>\n            </li>\n            )\n        }) );\n        if(props.onFetchWallets)\n            props.onFetchWallets(myWallets);\n    }\n\n    return (\n        <div>\n            <div style={styles.wallets}>\n                { props.wallet_id ?\n                    wallets[props.wallet_id-1] : wallets\n                } \n            </div>\n            <p style={{clear: \"both\"}} />\n            <br/>\n            <div style={styles.content}>\n                 <p style={styles.alert_text}> \n                    为了教学方便，我们把地址的私钥全部导出了，所以千万不要在正式场合下使用这几个钱包，\n                    否则你的钱可能会丢失、或被盗。\n                </p>\n            </div>\n        </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/components/Cells.tsx",["124"],"/Users/retric/Desktop/ckb-react/src/components/Transaction.tsx",["125"],"import React, { useState, useEffect } from 'react';\nimport Api from '../api/blockchain';\nimport { QueryOption } from '../types/blockchain';\nimport FreshButton from \"./widget/fresh_button\";\nimport commonStyles from \"./widget/common_style\";\nimport {\n    TransactionWithStatus\n} from \"../types/blockchain\";\nimport CodePiece from './widget/code';\n\nconst styles = {...commonStyles, ...{\n    list_panel: {\n        margin: '20px',\n    },\n    tx_panel: {\n        width: \"600px\",\n        border: \"1px solid white\",\n        float: \"left\" as const,\n        marginRight: \"20px\",\n        padding: \"10px\",\n        listStyleType: \"none\",\n        overflow: \"scroll\",\n        fontSize: \"10px\",\n        display: \"block\",\n        textAlign: 'left' as const\n    },\n}};\n\nexport type Props = {\n    query: QueryOption,\n    length?: number\n}\n\nexport default function Transaction(props: Props){\n    \n    const [txs, setTxs] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    \n    async function fetchTransactions() {\n        setIsLoading(true);\n        const api = new Api();\n        const length = props.length || 10;\n        var txs = await api.getTransactions(props.query);\n        txs = txs.slice(0, length);\n        setTxs(txs.map((tx:TransactionWithStatus, index:number) => <li key={index} style={styles.tx_panel}>\n            <CodePiece code={JSON.stringify(tx, null, 2)} />\n        </li>));\n        setIsLoading(false);\n    }\n\n    return(\n        <div style={styles.list_panel}>\n            <p>\n               <FreshButton isLoading={isLoading} onClick={fetchTransactions} text='刷新'></FreshButton>\n            </p>\n           {txs}\n           <p style={{clear: \"both\"}} />\n        </div>\n    )\n}\n\n\n/**   \n * \n * {\n[1]     transaction: {\n[1]       cell_deps: [],\n[1]       hash: '0xac10b54d29cb66c0484faf1e6b1eb1cea4a481c21f1758e82ed6040db1cacfac',\n[1]       header_deps: [],\n[1]       inputs: [Array],\n[1]       outputs: [Array],\n[1]       outputs_data: [Array],\n[1]       version: '0x0',\n[1]       witnesses: [Array]\n[1]     },\n[1]     tx_status: {\n[1]       block_hash: '0x21822a9bc055a6223f45c3311a5802b837e7b441f0e9497d0758d8b29a8e8d9e',\n[1]       status: 'committed'\n[1]     }\n[1]   },\n * \n * \n */","/Users/retric/Desktop/ckb-react/src/components/widget/copy_text.tsx",["126"],"/Users/retric/Desktop/ckb-react/src/components/widget/fresh_button.tsx",["127","128"],"/**** \n * improve: \n *  - [ ] every button instance of this componet  must create its own isLoading and setIsLoading, this is ugly and unacceptable.\n *  - [ ] should provide css customize option for user\n *  - [ ] try export this as a standalone button for re-use\n */\nimport React, {useState, useEffect, useRef} from \"react\";\nimport {\n    Button\n} from \"@material-ui/core\";\nimport commonStyle from \"./common_style\";\nimport { useSpring, animated } from \"react-spring\";\nimport \"./button.css\";\n\nexport type Props = {\n    isLoading: boolean\n    text: string\n    onClick: () => void\n}\n\nconst styles = {...commonStyle, ...{\n    loader: {\n        border: '4px solid rgba(255, 255, 255, 0.2)',\n        borderLeft: '4px solid',\n        animation: 'load 1s infinite linear',\n        borderRadius: '50%',\n        width: '25px',\n        height: '25px'\n    },\n    btn: {\n        padding: '1rem 2rem',\n        fontSize: '16px',\n        color: '#ffffff',\n        borderRadius: '6px',\n        backgroundColor: '#2080df'\n    },\n    btndiv: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%',\n        height: '100%'\n    }\n}}\n\nconst Loader = () => <div style={styles.loader} />;\n\nexport default function FreshButton(props: Props){\n\n    const [showLoader, setShowLoader] = useState(false);\n\n    useEffect(() => {\n        if (props.isLoading) {\n          setShowLoader(true);\n        }\n    \n        // Show loader a bits longer to avoid loading flash\n        if (!props.isLoading && showLoader) {\n          const timeout = setTimeout(() => {\n            setShowLoader(false);\n          }, 400);\n    \n          return () => {\n            clearTimeout(timeout);\n          };\n        }\n      }, [props.isLoading, showLoader]);\n  \n    // Hooks used to fade in/out the loader or the button contents\n    const fadeOutProps = useSpring({ opacity: showLoader ? 1 : 0 });\n    const fadeInProps = useSpring({ opacity: showLoader ? 0 : 1 });\n\n    return(\n        <div>\n            <button style={styles.btn} onClick={props.onClick} >\n            {showLoader ? (\n                  <animated.div style={fadeOutProps}>\n                    <Loader />\n                  </animated.div>\n                ) : (\n                  <animated.div style={fadeInProps}>{props.text}</animated.div>\n            )}\n            </button>\n        </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/types/blockchain.ts",[],"/Users/retric/Desktop/ckb-react/src/components/widget/form.tsx",["129"],"import React, {useState, useEffect, useRef} from \"react\";\nimport CodePiece, { CodePieceType } from './code';\nimport FreshButton from './fresh_button';\n\nconst styles = {\n    form_box: {\n        border: '1px solid white',\n        padding: '20px',\n        overflow: 'scroll'\n    }\n}\n\nexport type Props = {\n    form_template: string\n    btn_text?: string\n    onSubmit?: (form_content: string) => void\n}\n\nexport default function Form(props: Props){\n    const [isLoading, setIsLoading] = useState(false);\n    const ref = useRef<CodePieceType>(null);\n    \n    const handleSubmit = function(){\n        setIsLoading(true);\n        console.log('here we go');\n        console.log(ref.current)\n        if(ref.current){\n            const data = ref.current.getContent();\n            if(props.onSubmit){\n                props.onSubmit(data);\n            }\n        }\n        setIsLoading(false);\n    }\n\n    return(\n      <div style={styles.form_box}>\n        <CodePiece code={props.form_template} isContentEditable={true} ref={ref}></CodePiece>\n        <FreshButton isLoading={isLoading} text={props.btn_text || '提交'} onClick={handleSubmit} />\n      </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/components/widget/code.tsx",["130"],"import React, {Ref, useImperativeHandle, useRef, forwardRef, useState}  from \"react\";\n\nconst styles = {\n    no_outline:{\n        outline: '0px solid transparent'\n    }\n}\n\nexport type CodeProp = {\n    code: string | object,\n    isContentEditable?: boolean\n}\n\nexport type CodePieceType = {\n    getContent: () => string\n}\n\nconst CodePeice = forwardRef((prop: CodeProp, ref: Ref<CodePieceType>) => {\n    const preRef = useRef<HTMLPreElement>(null);\n    \n    const getContent = () => {\n        return preRef.current?.innerText || '';\n    }\n\n    useImperativeHandle(ref, () => ({ getContent }));\n\n    return (\n        <div>\n            <pre ref={preRef} contentEditable={prop.isContentEditable?'true':'false'} onInput={getContent} style={styles.no_outline} >\n                { typeof prop.code === 'string' &&\n                    prop.code\n                }\n                { typeof prop.code === 'object' &&\n                    JSON.stringify(prop.code, null, 2)\n                }\n            </pre>\n        </div>\n    )\n})\n\nexport default CodePeice;","/Users/retric/Desktop/ckb-react/src/components/widget/notify.tsx",["131","132"],"import React, { useRef, useState } from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function NotifyPlace(){\n    return(\n        <div>\n            <ToastContainer />\n        </div>\n    )\n}\n\nconst notify = (message: string) => {\n    toast(message);\n}\n\nexport { notify }","/Users/retric/Desktop/ckb-react/src/components/Learn.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/widget/common_style.ts",[],"/Users/retric/Desktop/ckb-react/src/components/ChainConfig.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/widget/hex2decimal.tsx",[],"/Users/retric/Desktop/ckb-react/src/index.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/Class4.tsx",["133"],"/Users/retric/Desktop/ckb-react/src/components/WalletCells.tsx",["134","135"],"/Users/retric/Desktop/ckb-react/src/components/ToTxHash.tsx",["136"],"/Users/retric/Desktop/ckb-react/src/components/FetchToSignMessage.tsx",["137","138"],"/Users/retric/Desktop/ckb-react/src/components/Signer.tsx",[],"/Users/retric/Desktop/ckb-react/src/components/SendTx.tsx",["139"],"import React, {useState} from 'react';\nimport FreshButton from './widget/fresh_button';\nimport { notify } from './widget/notify';\nimport Api from '../api/blockchain';\n\nimport type {\n    Transaction\n} from '../types/blockchain';\n\nexport type Props = {\n    tx: Transaction | undefined\n}\n\nexport default function SendTx(props: Props){\n    const [isLoading, setIsLoading] = useState(false);\n    const [tx_hash, setTxHash] = useState('');\n\n    const sendTx = async () => {\n        setIsLoading(true);\n        const api = new Api();\n        if(props.tx){\n            const res = await api.sendTx(props.tx);\n            console.log(res);\n            if(res.status == 'ok'){\n                setTxHash(res.data);\n            }\n            else{\n                notify(res.data);\n            }\n        }else{\n            notify('transaction is undefined');\n        }\n        setIsLoading(false);\n    }\n\n    return(\n        <div>\n            <FreshButton isLoading={isLoading} text={'发送交易上链'} onClick={sendTx} ></FreshButton>\n            <p> tx_hash: {tx_hash}</p>\n        </div>\n    )\n}","/Users/retric/Desktop/ckb-react/src/components/SeriliazedWitnessArgs.tsx",["140"],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":11,"column":1,"nodeType":"147","endLine":54,"endColumn":2},{"ruleId":"148","severity":1,"message":"149","line":181,"column":43,"nodeType":"150","messageId":"151","endLine":181,"endColumn":47},{"ruleId":"152","severity":1,"message":"153","line":43,"column":8,"nodeType":"154","endLine":43,"endColumn":10,"suggestions":"155"},{"ruleId":"152","severity":1,"message":"156","line":40,"column":6,"nodeType":"154","endLine":40,"endColumn":24,"suggestions":"157"},{"ruleId":"158","severity":1,"message":"159","line":1,"column":27,"nodeType":"160","messageId":"161","endLine":1,"endColumn":36},{"ruleId":"158","severity":1,"message":"162","line":14,"column":25,"nodeType":"160","messageId":"161","endLine":14,"endColumn":39},{"ruleId":"158","severity":1,"message":"163","line":7,"column":37,"nodeType":"160","messageId":"161","endLine":7,"endColumn":43},{"ruleId":"158","severity":1,"message":"164","line":9,"column":5,"nodeType":"160","messageId":"161","endLine":9,"endColumn":11},{"ruleId":"158","severity":1,"message":"159","line":1,"column":26,"nodeType":"160","messageId":"161","endLine":1,"endColumn":35},{"ruleId":"158","severity":1,"message":"165","line":1,"column":62,"nodeType":"160","messageId":"161","endLine":1,"endColumn":70},{"ruleId":"158","severity":1,"message":"163","line":1,"column":17,"nodeType":"160","messageId":"161","endLine":1,"endColumn":23},{"ruleId":"158","severity":1,"message":"165","line":1,"column":25,"nodeType":"160","messageId":"161","endLine":1,"endColumn":33},{"ruleId":"145","severity":1,"message":"146","line":4,"column":1,"nodeType":"147","endLine":13,"endColumn":2},{"ruleId":"158","severity":1,"message":"163","line":1,"column":27,"nodeType":"160","messageId":"161","endLine":1,"endColumn":33},{"ruleId":"158","severity":1,"message":"166","line":6,"column":30,"nodeType":"160","messageId":"161","endLine":6,"endColumn":44},{"ruleId":"167","severity":1,"message":"168","line":30,"column":27,"nodeType":"169","messageId":"151","endLine":30,"endColumn":29},{"ruleId":"158","severity":1,"message":"170","line":3,"column":5,"nodeType":"160","messageId":"161","endLine":3,"endColumn":14},{"ruleId":"158","severity":1,"message":"171","line":6,"column":5,"nodeType":"160","messageId":"161","endLine":6,"endColumn":9},{"ruleId":"167","severity":1,"message":"168","line":24,"column":27,"nodeType":"169","messageId":"151","endLine":24,"endColumn":29},{"ruleId":"167","severity":1,"message":"168","line":17,"column":23,"nodeType":"169","messageId":"151","endLine":17,"endColumn":25},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-eval","eval can be harmful.","CallExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchWallets'. Either include it or remove the dependency array.","ArrayExpression",["174"],"React Hook useEffect has a missing dependency: 'queryCells'. Either include it or remove the dependency array.",["175"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setPlaceholder' is assigned a value but never used.","'useRef' is defined but never used.","'Button' is defined but never used.","'useState' is defined but never used.","'OptionTypeBase' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'HexString' is defined but never used.","'Cell' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [fetchWallets]",{"range":"180","text":"181"},"Update the dependencies array to be: [props.render_dep, queryCells]",{"range":"182","text":"183"},[1013,1015],"[fetchWallets]",[860,878],"[props.render_dep, queryCells]"]