{
  "tutorial": {
    "common": {
      "saveBtnText": "保存",
      "formFillHereText": "将此处补充完整",
      "proofText": "证明",
      "cellOfWallet1": "钱包 1 的 Cell",
      "fetchCellOfWallet1": "刷新",
      "decimalInputPlaceHolder": "10 进制，单位：CKB",
      "hexInputPlaceHolder": "16 进制，以 0x 开头",
      "txSaveSuccessAlertMsg": "tx 已成功保存！",
      "illegalTokenAlertMsg": "非法字符：",
      "tableOfContents": {
        "theoreticalKnowledgeMinimized": {
          "title": "第一步：理论知识",
          "unravelCKB": "理解 CKB",
          "howToOwnACell": "怎样才能拥有一个 Cell",
          "howToTellThatYouOwnACell": "怎么知道你的 Cell 属于你?",
          "takeABreak": "课间休息",
          "whereToFindTheHiddenCode": "真正的代码藏在哪里？",
          "whatIfTheCodeIsLost": "锁的代码如果丢了怎么",
          "whatIsATransaction": "交易是什么",
          "roleOfTheTypeLock": "type 锁的作用"
        },
        "getYourHandsDirty": {
          "title": "第二步：动手实践",
          "studyAChain": "观察一条链",
          "sendATransaction": {
            "title": "发送一笔交易",
            "transactionInput": "交易的 INPUT",
            "transactionOutput": "交易的 OUTPUT",
            "signTheTransaction": "对交易进行签名",
            "buildATransaction": {
              "title": "构造交易",
              "fillInTheTransaction": "将交易补充完整",
              "generateHash": "生成交易哈希",
              "generateMessage": "生成待签名的 message",
              "completeTheSignature": "开始签名",
              "putTheSignatureBackToTransaction": "把签名放回到交易中",
              "sendTheTransaction": "发送交易"
            }
          },
          "sendAMultiSigTransaction": {
            "title": "发送一笔多签交易"
          },
          "deployASmartContract": {
            "title": "部署一个合约"
          },
          "deployAUpgradableSmartContract": {
            "title": "部署一个可升级的合约"
          }
        }
      },
      "beforeWeGetStarted": {
        "p1": "首先恭喜你点开了这个页面！相信我，这预示着你将比其他初学者更早搞懂关于 CKB 的一切。",
        "p2": "不管你是为了在 CKB 上开发 DAPP，还是单纯对 CKB 感到好奇想要弄懂基本原理，都可以跟随本教程，完成与 CKB 的第一次亲密接触。",
        "p3": "这个教程分为四部分，跟随教程完整走一遍，我们将会亲自动手完成、并搞懂怎样在 CKB 上：",
        "ul1": {
          "l1": "构建并发送一笔最简单的转账交易",
          "l2": "构建并发送一笔最简单的多签交易",
          "l3": "构建并部署一个最简单的智能合约",
          "l4": "构建并部署一个可升级的智能合约"
        },
        "p4": "最棒的是，搞懂这一切",
        "ul2": {
          "l1": "不需要你在本地下载任何东西",
          "l2": "不需要你运行任何软件",
          "l3": "甚至不需要你写一行代码！"
        },
        "p5": "一切都将在本页面中，以一种纯手工的、远程的、与云端测试链互动的方式完成。",
        "p6": "所以你需要具备的唯一要求是：保持往下阅读的耐心，以及对 CKB 的好奇心:D",
        "p7": "那么废话不多说，让我们在 CKB 上开始这一次有趣的冒险之旅吧！"
      },
      "theoreticalKnowledgeMinimized": {
        "title": "第一步：最小化的理论知识",
        "q1": "世上根本没有比特币，只有一个又一个的 UTXO。",
        "q2": "世上根本没有 CKB, 只有一个又一个的 Cell。",
        "unravelCKB": {
          "title": "理解 CKB",
          "p1": "理解 CKB 的第一步，是抛开所有复杂的概念，只抓住这条链的本质：一切都是 Cell，以及 Cell 的转换而已。",
          "p2": "Cell 是 CKB 的基本单元，就像人体的细胞。一个个的 Cell 构成了整个 CKB 区块链的全局状态。 当我们在区块链上发起一笔交易改变了某个状态， 无论这笔交易多么复杂，状态改变流程多么繁琐， 最终对 CKB 来说，都是这笔交易把某些 Cell 消费掉，从而产生了一些新的 Cell 而已。 这个过程跟比特币的 UTXO 是完全一样的。",
          "p3": "被消费掉的 Cell 就是死去的 Dead Cell，未被消费的 Cell 是 live Cell。 一条链不停地经由交易去消费 Cell 和创造 Cell， 就像全身的细胞在更新换代、分裂生长。",
          "p4": "跟 UTXO 不同的是，Cell 可以用来存储任意类型的数据。Cell 有一个字段名为 data，里面可以放入无格式的字符串。 这意味着，你往 data 上写入什么样的内容都可以，格式也是你自己定，只要你自己知道怎么解读这段字符串就行。",
          "p5": "比如，我可以往上面存一个哈希，存一段文字，也可以存一个日期， 甚至，你可以放一段二进制代码进去，而这段代码又可以被其他 Cell 引用， 经过虚拟机 CKB-VM 在链上运行。",
          "p6": "这其实就是 CKB 上所谓的智能合约，它的原理就是如此简单。"
        },
        "howToOwnACell": {
          "title": "那么我们怎样才能拥有一个 Cell 呢？",
          "p1": "因为 Cell 是在链上经过共识得到的，所以 Cell 的存储空间必然是宝贵的，拥有 Cell 必然需要付出成本。",
          "p2": "这就引出了 CKB 原生代币的作用了。",
          "p3": "你可以把 Cell 想象成是一个一个的小盒子，可以拿来装东西，而这个盒子本身是通过代币创造出来的。 你有多少币，你就可以有多大的盒子。",
          "p4": "一个盒子还可以细分成多个盒子，只要总的盒子空间，跟你持有的代币总量相等就行。",
          "p6": "根据系统的设定，1个 CKB 等于 1个 byte（字节）的空间。",
          "p7": "比如，你有 100 个CKB，那你在链上就有 100 byte 的空间，你就能创造出拥有 100 byte 空间的盒子。 至于你的这 100 byte 总共是一个盒子还是两个盒子，可以随意划分创造。",
          "p8": "盒子(Cell)有了空间之后可以拿来放数据，这些数据的大小要小于整个盒子的大小，因为盒子还有一些其他的组成部分，它们也需要占用一定的空间。",
          "p9": "按一个汉字占2个字节（GBK编码）来算，如果你有 100 CKB，那么你大概可以往这个 Cell 上存不到 50 个汉字的内容上去。",
          "p10": "《红楼梦》总共约为 78 万字，所以你大概需要 156 万个 CKB 原生代币才能把整部书上传到链上。",
          "p11": "由此我们可以发现，链上的 Cell 空间真的是非常宝贵的存在。",
          "p12": "CKB 通过这种只在链上存储共识的设计，也是为了鼓励大家把真正有价值的、有必要经过共识的数据上传到链上。这些数据相当于整个人类共同拥有的知识库。",
          "p13": "实际上这也是 CKB 名字的由来（Common knowledge base）。",
          "p14": "完整的 Cell 数据结构长这样：",
          "p15": "四个字段具体含义如下：",
          "ul1": {
            "l1": "capacity：表示 Cell 的空间大小，同时也是这个 Cell 代表的原生代币的数量，我们通常会选择用 16 进制来表示, 最小单位为 shannon，1 CKB = 10**8 shannon",
            "l2": "lock：是一个脚本，本质相当于是一把锁，下文将详解",
            "l3": "type: 是一个脚本，和 lock 一样，只是锁的用途不同，下文将详解",
            "l4": "data: 是一个无格式字符串，可以在这里存放任何类型的数据"
          },
          "p16": "更详细的数据结构介绍可以参考这里：",
          "p17": "关于 Cell，你需要记住的最重要的一条规则是，上面这四个字段所占用的空间，加起来要小于或等于 capacity 的值。",
          "p18": "也就是说,",
          "p19": "为了更好的理解这点，让我们来看一个具体的例子。",
          "p20": "下面是一个小实验，输入汉字作为 Cell 的 data，可以查看 Cell 实时的空间变化。 点击 Cell，还可以看到 Cell 具体的内容，以及每个字段实际占据的空间大小。",
          "p21": "我们设定该 Cell 的 capacity 值为 0x1dcd65000，也就是 80 Bytes 大小。 如果 data 的变化，导致实际占用空间超过了 capacity 的值，那么 Cell 就会被认为是不合法的 Cell。"
        },
        "howToKnowCellIsYours": {
          "title": "怎么知道你的Cell属于你？",
          "p1": "既然需要拥有原生代币才能拥有 Cell，那么我们怎么知道链上的某一个 Cell 是属于你的呢？",
          "p2": "还记得上面介绍的 lock 和 type 吗？",
          "p3": "如果说 Cell 是一个盒子，那么 lock 和 type 就相当于盒子上挂着的两把锁。",
          "p4": "其中，lock 是默认配上的锁，type 则是一把可选的锁。",
          "p5": "这种锁本质上是一段代码程序和一些参数。当我们试图去消费一个 Cell 的时候，这把锁会自动运行， 输入参数和我们提交的一些证明（比如对交易的签名），来判断锁能否被解开。 如果能解开，就证明我们对 Cell 拥有所有权和控制权。",
          "p6": "锁是一种脚本结构（Script），它长这个样子：",
          "p7": "在三个字段中，让我们先忽略 hash_type 留给后面再讲：",
          "ul1": {
            "l1": "表示一段代码的哈希",
            "l2": "表示要往这段代码传入的参数"
          },
          "p8": "更详细的数据结构介绍可以参考这里：",
          "p9": "code_hash 与 args 合起来组成了一把完整的“锁”：我们通过 code_hash 字段找到要执行的代码在哪里，然后往这段代码里传入参数 args， 随后这段程序就会被虚拟机 CKB-VM 执行（这个过程可能还会读取一些额外的参数，比如交易附带的证明），如果执行成功，将返回 0，表示这个锁能被顺利解开，如果执行不成功，返回",
          "p10": "运用这个原理，CKB 判断 一个 Cell 属于谁，就是判断谁能解开这个 Cell 附带的 lock 锁。这跟比特币的原理是一样的。",
          "p11": "我们可以通过 code_hash 引入一个非对称加密算法，然后在 args 上放入自己的公钥作为参数。 当需要使用这个 Cell 的时候，比如需要发起一笔交易， 就用私钥对这笔交易做一个签名， 这样加密算法输入公钥和签名，就能判断这笔交易是不是由对应的私钥发起的， 从而也就能判断背后是不是这个 Cell 真正的主人在操作。",
          "p12": "反过来说，如果你创造的 Cell 加了一把谁都能打开的锁， 那么这意味着，任何人都可以消费这个 Cell。也就是说，你的钱任何人都能花掉！这是非常危险的。所以，锁对 Cell 来说真的非常重要。"
        },
        "takeBreak1": {
          "p1": "好了你已经成功读到了这里，让我们回顾下目前掌握的新知识：",
          "ul1": {
            "l1": "CKB 这条链的本质是一个个的 Cell，在不停地被创造出来和死去。",
            "l2": "Cell 就是一个盒子，一个容器，它可以用来装任何类型的数据。",
            "l3": "要拥有 Cell 这个盒子，你需要有代币。代币的数量等于盒子空间的大小。1 CKB = 1个 byte 字节大小。",
            "l4": "整个 Cell 占用的总空间，不能超过 capacity 字段的数值大小。",
            "l5": "要保护自己的 Cell，你可以在 Cell 这个盒子上加一把锁，只有自己的钥匙能打开。"
          },
          "p2": "看起来相当不错，我们已经掌握了不少的原理。相信我，你已经搞懂了大半，接下来我们还需要再了解一点细节。"
        },
        "whereIsTheActualCode": {
          "title": "真正的代码藏在哪里？",
          "p1": "我们已经知道，可以使用 Cell 的 lock 和 type 字段给盒子上锁，来帮我们保护这个盒子的所有权和控制权。",
          "p2": "锁是一种脚本结构，这个结构长这样：",
          "p3": "你应该注意到了，code_hash 里放的并不是真正的代码，而是代码的哈希，相当于这段代码的一个索引。我们通过这个索引，可以找到锁真正使用的代码。 那么这段所谓真正的代码，又是放在哪里的呢？",
          "p4": "答案很简单，代码是放在另一个 Cell 里的！",
          "p5": "我们知道 Cell 的 data 字段可以放入任意的数据，因此我们可以把真正的代码放在另一个 Cell 的 data 字段， 然后把这个 Cell 作为依赖引入到一笔交易中， 这个依赖的 Cell 就叫作 dep cell。",
          "p6": "当我们需要解锁某个 Cell 的时候，只要引入这个 dep cell， CKB 系统就会通过 code_hash 去匹配 dep cell 里的 data 的哈希， 找出这把锁需要的代码。",
          "p7": "为什么不直接放入真正的代码，而通过这种索引的方式呢？",
          "p8": "这种设计有许多好处，其中一个比较明显的好处是， 如果所有人都需要同一种类型的锁，那么锁的代码都是相同的，code_hash 的值也都是相同的， 只要引入相同的 dep cell 就行了，而不需要每个人把相同的代码重新部署一遍，浪费空间。",
          "p9": "我们来看一个真实的例子。",
          "p10": "CKB 系统内建的一个很重要的智能合约叫 SECP256K1_BLAKE160， 它是每个 Cell 在普通的转账交易中 lock 字段默认使用的一把锁。 这把锁代表的就是用 SECP256K1 这种特定的加密算法，来保护每个 Cell 最基础的所属权。",
          "p11": "而 CKB 系统实现这一点的方法，是在创世块的时候创建了一些 Cell， 然后在这些 Cell 的 data 字段放入 SECP256K1 加密算法的具体代码。 转账时，我们把这些 Cell 作为 dep cell 引入到交易中， 然后在 code_hash 填上 dep cell 的 data 字段的哈希，同时在 args 字段放入自己的公钥哈希， 那么这把锁就有能力去判断，一笔转账交易附上的签名，是否真实有效。",
          "p12": "但这时候，你可能想到了另一个问题:"
        },
        "whatIfCodeIsLost": {
          "title": "锁的代码如果丢了怎么办？",
          "p1": "锁的代码是放在另一个 Cell 里面的，如果这个 Cell 被别人销毁了怎么办？ 这个 Cell 被消费掉，意味着 dep cell 已经是 dead cell，锁的代码也就随之消失了， 这样使用了这把锁的 Cell 岂不是永远无法再解锁了？",
          "p2": "没错。理论上，存放锁代码的 Cell 应该随着这条链的寿命一样永远存在下去。不应该有人能动这个 Cell。所以如果你去查的话， 其实可以看到，CKB 所有内建的锁脚本，所依赖的 dep cell 本身是任何人无法再操作的，因为我们在这些 dep cell 上的 lock 字段（也就是放锁代码的 cell 本身的锁）都设置了 0x0000.. 的数值， 这意味着没有人能再解锁这些 Cell，代码也就将一直存在下去：",
          "p3": "当然，实际上如果这个 dep_cell 被销毁了，我们还是有办法解锁自己的 Cell。 因为你只要把相同的锁代码再重新部署到一个新的 Cell 里， 然后把新的 Cell 作为 dep_cell 引入，就能重新找回锁的代码了。 因为代码相同，意味着代码的哈希相同，也就意味着 code_hash 的值不变。 这是CKB的另一个灵活之处。",
          "p4": "我们上面讲的这些锁的例子，都是 Cell 里的 lock 字段的锁。",
          "p5": "但一个 cell 除了默认的 lock 锁，还有一把可选的 type 锁。 这两把锁的本质是一样的，只不过因为用途的不同，所以取了不同的名字。",
          "p6": "lock 锁通常用来保护盒子的所有权，type 锁则用来保证 Cell 在交易过程中遵循某些数据变换规则。",
          "p7": "要搞懂上面这句话的意思，我们需要开始介绍 CKB 中的一笔交易到底是怎么回事了。",
          "p8": "交易就是销毁一些 Cell，再创造一些 Cell",
          "p9": "CKB 中的一笔交易，掐去不太紧要的细节，本质上就是这样：",
          "p10": "其中，input 和 output 的本质，仍然是一些 Cell：",
          "p11": "input 中的 Cell 必须都是 live cell，通过一笔交易之后，这些 input cell 都被消费掉了，也就都成了dead cell。 而新创造出来的 output cell 则成了新的 live cell。",
          "p12": "关于 CKB 交易，你需要记住最重要的一条规则是，所有 output cell，也就是新创造出的盒子，它占用的空间必须小于 input cell。",
          "p13": "为什么只能小于呢？因为多出来的那一部分空间大小，也就是 input 和 output 二者之间的差值，就是矿工挣到的手续费。矿工毕竟不能白干活啊。",
          "p14": "而在实际的设计中，出于存储优化的考虑，我们并不会真的在 input 中放入完整的 cell，而是只放 cell 的索引， 通过索引找到作为输入的 cell。",
          "p15": "这个索引的结构叫 OutPoint。通过 OutPoint，可以找到唯一一个 Cell。"
        },
        "roleOfTypeLock": {
          "title": "Type锁的作用",
          "p1": "在交易中，cell 从输入变成输出，它们在转换中可以遵循某些用户自定义的规则。",
          "p2": "比如，我希望某个 cell 在交易中必须每次只能产生一个新的 cell，那么我就可以把这样一条规则变成一把锁，挂在盒子上。 再比如，我希望一个 cell 在交易中，它的 data 字段永远不会出现“胡萝卜”三个字，那么也可以构造这样一种规则的锁， 通常，这把锁会被放到盒子的 type 锁里。",
          "p3": "这就是 type 和 lock 这两把锁的不同。一个用来保护盒子的所有权，一个用来保护数据转换规则。lock 锁就像 cell 的看门人，而 type 锁则是 cell 的守护神。",
          "p4": "这种用途上的不同，归根到底是因为两把锁在运行机制上的设计有所差异。",
          "p5": "两把锁的运作机制:",
          "ul1": {
            "l1": "lock 锁：在一笔交易中，所有 input 的 lock 锁都会被执行一遍。",
            "l2": "type 锁：在一笔交易中，所有 input 和 output 的 type 锁都会被执行一遍。"
          },
          "p6": "因为执行机制的不同，所以衍生出来的适合的用途也不同。 当然，你完全可以有自己的想法，本质上这些用途只是官方推荐的一种用法而已。 你完全可以不遵守。"
        },
        "takeABreak2": {
          "p1": "恭喜你，现在你已经掌握了这个教程所有必须的最小化的知识！",
          "p2": "回顾下我们学习到的所有理论：",
          "ul1": {
            "l1": "CKB 这条链的本质是一个个的 Cell，在不停地被创造出来和死去。",
            "l2": "Cell 就是一个盒子，一个容器，它可以用来装任何类型的数据。",
            "l3": "要拥有 Cell 这个盒子，你需要有代币。代币的数量等于盒子空间的大小。1 CKB = 1个 byte 字节大小。",
            "l4": "整个 Cell 占用的总空间，不能超过 capacity 字段的数值大小。",
            "l5": "要保护自己的 Cell，你可以在 Cell 这个盒子上加一把锁，只有自己的钥匙能打开。",
            "l6": "锁的本质是一段可以运行的代码和一些参数。通过输入参数和用户提供的一些签名或者证明，代码运行判断是否能解锁。",
            "l7": "返回 0 代表解锁成功，返回其他数值代表解锁失败。",
            "l8": "Cell 使用 code_hash 找到锁对应的代码，这些代码存放在 dep cell 里的 data 字段。",
            "l9": "每个 Cell 可以加两把锁，一把叫 lock（默认），一把叫 type（可选）",
            "l10": "在一笔交易中，所有 input 的 lock 锁都会被执行一遍。",
            "l11": "在一笔交易中，所有 input 和 output 的 type 锁都会被执行一遍。",
            "l12": "运行机制上的不同，让两把锁产生了不同的用途。",
            "l13": "lock 锁通常被用来保护盒子的所有权。",
            "l14": "type 锁通常被用来保证盒子的数据转换规则。",
            "l15": "一笔交易的本质就是销毁一些 cell，然后创造一些新 cell。"
          },
          "p3": "没错，只要掌握上面这些理论知识，你就可以开始上路了。",
          "p4": "接下来，我们将亲自动手体验 CKB！"
        }
      },
      "getYourHandDirty": {
        "title": "第二步：动手实践",
        "p1": "亲自上手摸摸 CKB 这条链，才能更好体会到前面的理论知识。",
        "studyAChain": {
          "title": "观察一条链",
          "p1": "我们已经在云端运行了一条测试链， 并预先生成了一些账户地址，方便这次教程的使用。",
          "p2": "试试点击下面的按钮，查看这条链最新的区块。",
          "p3": "接下来我们准备了 3 个钱包。",
          "p4": "试试看把鼠标移到钱包上，打开钱包。",
          "p5": "每个钱包有四条信息，其含义如下：",
          "ul1": {
            "l1": "mainnet，表示钱包的主网地址。",
            "l2": "testnet，表示钱包的测试网地址。本次教程我们只会用到 testnet 地址。",
            "l3": "lock_arg，是钱包对应的公钥哈希的前20位。你可以简单把它理解成公钥的指纹。",
            "l4": "private_key，是钱包的私钥。你不应该像我这样把它暴露出来。"
          },
          "p6": "在本次教程中，这 3 个钱包将被我们用于发送交易、部署合约等各种用途。",
          "p7": "现在，你可以通过下面的按钮，选择其中任意一个钱包，查看这个钱包相关的 Cell 和交易。",
          "p8": "点击上面任意一个 Cell 或者任意一笔交易，你会看到 JSON 格式的详细信息。",
          "p9": "当我们在说，一个钱包拥有多少 CKB (原生代币)的时候，我们其实指的是，这个钱包能够解锁的所有的 live Cell 的 capacity 之和，也是这个钱包在链上占有的总存储空间。",
          "p10": "现在，钱包 1 是云端这一条测试链默认的矿工地址。",
          "p11": "也就是说，钱包 1 将源源不断收到来自挖矿所获得的出块奖励。所以你会看到钱包 1 查找出来的 live Cell 是最多的。钱包 2 和钱包 3 只有很少、甚至还没有 live cell。",
          "p12": "目前，测试链只有一个矿工。",
          "p13": "最后，我们还需要知道这条测试链的配置信息。",
          "p14": "测试链的配置信息",
          "p15": "ckt 表明这条链是测试链，而不是主网。",
          "p16": "scripts 里代表的则是链内置的智能合约，也就是 type 和 lock 可以利用的系统内置的一些锁。",
          "p17": "每条 CKB 链都会预先在创世块部署几个系统内置的智能合约，上面显示了3个系统合约的具体信息。",
          "ul2": {
            "l1": "SECP256K1_BLAKE160：是系统默认使用的 Cell 的 lock 锁的合约，用来保护 Cell 的所有权",
            "l2": "SECP256K1_BLAKE160_MULTISIG：是 SECP256K1_BLAKE160 的多签版本",
            "l3": "DAO：NervosDAO 合约，暂时可以不用管"
          },
          "p18": "好了，这就是我们所有必须了解的信息了。",
          "p19": "接下来，我们将开始构建并发送第一笔交易！"
        }
      }
    },
    "context": {
      "takeABreak": "课间休息",
      "moreClass": "更多课程",
      "toBeContinue": "敬请期待。"
    },
    "widget": {
      "sendTx": {
        "btnText": "发送交易",
        "checkBlockBtnText": "查看打包了该交易的区块",
        "txUndefinedAlertMsg": "tx is undefined. 请补充完上面的交易表格，然后点击保存按钮。",
        "p1": "注意看下，交易成功上链后返回的 tx_hash，是不是和之前事先生成的那个 tx_hash 一模一样？",
        "p2": "CKB 的确定性诚不欺我。",
        "p3": "现在，你可以通过下面的按钮，看看刚才我们发送的交易是不是真的在链上了。如果提示 tx_status: pending , 则表明交易还在pending，稍后重试就可以了。"
      },
      "completeTxWithWitness": {
        "btnText": "witnesses 加入 raw_tx"
      },
      "toTxHash": {
        "btnText": "生成 tx_hash",
        "serializedTxBeforeHash": "the serialized Transaction before hash function:",
        "txUndefinedAlertMsg": "raw transaction is undefined. 请补充完上面的交易表格，然后点击保存按钮。"
      },
      "toSignMessage": {
        "btnText": "生成 message",
        "txUndefinedAlertMsg": "raw_tx is undefine."
      },
      "serializedWitnessArgs": {
        "btnText": "序列化 witnessArgs",
        "inputPlaceHolder": "lock: witness"
      },
      "toSignTx": {
        "btnText": "签名",
        "inputPlaceHolderMsg": "message",
        "inputPlaceHolderPrivkey": "private key"
      },
      "txConstructor": {
        "btnTextGen": "生成一笔交易",
        "btnTextClear": "清空"
      },
      "dragCellToInputBall": {
        "title": "把 Cell 拖进这里"
      },
      "outputCreatorTotalCapacity": {
        "totalCapText": "总空间：",
        "minerFee": "矿工手续费：",
        "settingBtnText": "⚙️ 设置"
      },
      "editOutputCells": {
        "capRuleAlertMsg": "capacity 需要小于 input 总和！tx_fee 不能为空！",
        "addNewCellBtnText": "+ 加一个新 Cell",
        "saveExitBtnText": "保存退出"
      },
      "editOutputPlainCell": {
        "capRuleAlertMsg": "capacity 不能大于"
      },
      "showChainInfo": {
        "title": "测试链的配置信息"
      },
      "toolBox": {
        "title": "CKB-ToolBox",
        "queryCellBtnText": "查找 Cell",
        "queryTxBtnText": "查找交易",
        "checkWalletBtnText": "查看钱包",
        "checkChainConfigBtnText": "查看链配置",
        "hexToDecimalBtnText": "16进制转换10进制",
        "queryCell": {
          "inputPlaceHolder": "lock_args..",
          "searchResultTile": "搜索结果：",
          "retryBtnText": "重试"
        },
        "queryTx": {
          "inputPlaceHolder": "lock_args..",
          "searchResultTile": "搜索结果：",
          "retryBtnText": "重试"
        },
        "hexToDecimal": {
          "hexNumberAlertMsg": "16进制数字需要以0x开头！",
          "inputDecimalPlaceHolder": "十进制",
          "inputHexPlaceHolder": "十六进制，以 0x 开头",
          "convertBtnText": "转换",
          "reverseFunctionBtnText": "对调",
          "resultText": "结果： "
        }
      },
      "wallets": {
        "wallet": "钱包",
        "securityAlertMsg": "仅作为演示用途，请勿在正式场合或主网下使用这些钱包 "
      },
      "newBlocks": {
        "fetchBtnText": "获取最新区块",
        "p1": "每个方块代表一个区块。上面展示的是这条链最新的9个区块。",
        "p2": "区块中值得关注的信息，是下半部分的交易。",
        "p3": "点击其中任意一条交易，你会看到 JSON 格式的详细信息。",
        "p4": "你可能会发现，一笔真实的交易，跟我们之前在理论课程中学到的结构有所不同，准确地说，是变得更复杂了一些。",
        "p5": "但它并没有逃出这个本质：",
        "p6": "如果你暂时看不懂交易结构里所有字段的意义，不要紧，我们将留给后续逐一攻破。"
      },
      "block": {
        "blockText": "区块：",
        "hashText": "哈希：",
        "timeText": "时间：",
        "transactionCount": "交易： {{count}} 条"
      },
      "capacityOfCell": {
        "inputPlaceHolder": "data：输入汉字..",
        "capacity": "占用空间",
        "actualCapacity": "实际占用空间",
        "isCellCapacityEnough": "Cell 容量是否足够：",
        "cellContent": "Cell 的内容：",
        "fieldCapacity": "每个字段占用空间大小：",
        "totalSpaceOccupy": "cell 总占用空间",
        "4FieldSumCapacity": "4个字段的长度之和"
      },
      "cell": {
        "capacity": "占用空间"
      },
      "walletCells": {
        "selectOptionLabel": "钱包",
        "selectPlaceHolder": "请点击并选择一个钱包",
        "selectCellsResultTitle": "钱包对应的 live cell",
        "selectTxsResultTitle": "钱包对应的交易"
      },
      "cellConcept": {
        "p1": "在 CKB 的宇宙中，漂浮着无数的 Cell。",
        "p2": "它们存储数据，共同构成了一条链的全局状态。"
      },
      "someCodes": {
        "outPoint": {
          "txHashText": "所属交易的哈希值（属于哪一笔交易）",
          "indexText": "所属交易输出的序号（属于第几个输出）"
        },
        "cellCapacityRule": {
          "totalSpaceOccupy": "cell 总占用空间",
          "4FieldSumCapacity": "4个字段的长度之和"
        }
      }
    },
    "class1": {
      "title": "发送一笔交易",
      "p1": "我们将在本节内容学会并亲自动手完成一笔最基础的转账交易。",
      "p2": "在开始之前，让我们在黑板上再次重写一遍：",
      "p3": "一笔CKB的交易，无非是消费一些已有的 live cell，去创造出另一些新的 live cell。",
      "p4": "同时，因为 CKB 采用的是“链下计算、链上确认”的设计，所以我们在转账的时候，甚至可以采用手动拼贴交易的方式，去完成一笔转账操作。",
      "p5": "只要我们事先拟好交易的内容（也就是注明这笔交易要消费哪些cell、创造出什么样的新cell），然后用相应的私钥对交易进行签名， 当这笔交易被提交到链上，只要验证通过、签名有效，那么交易就会被打包完成。",
      "p6": "这种手动拼贴交易的方式意味着什么呢？",
      "p7": "在 CKB 这种体系下，其实我们人肉组成了一个 layer2 网络。",
      "p8": "想象现在你有一位朋友住在亚马逊丛林里，他独自生活，身边只有一台离线的电脑，没有网络，与世隔绝。",
      "p9": "某天下午他打猎归来，突然想起来还欠你一点钱，他打开电脑，想转给你 1 万个 CKB 还债。",
      "p10": "尽管没有网络，他还是把转账交易的内容写在了一张纸上，然后在电脑里输入自己的私钥，计算出了这笔转账相应的签名，最后把签名也附在了纸上。",
      "p11": "过了半个月，当有信差来访时，他托人把这张纸邮寄到中国，又过了半个月，信纸终于送到了你的手上。",
      "p12": "你看着信纸，交易确实指明创造 1 万 CKB 的 cell 给你，你决定把这笔交易提交到 CKB 主网上。 ",
      "p13": "主网验证附上的签名有效，于是交易完成，你的账户里多了一万个CKB，债务两清了。",
      "p14": "你和亚马逊丛林的朋友共同组成了一个包含 2 个节点的 layer2 网络，虽然这个网络的吞吐量只有 1 笔交易/每月。",
      "p15": "尽管 CKB 目前已经有了各种各样的工具，帮助你自动构建交易、完成转账、部署合约，等等， 但接下来，我们还是会延续亚马逊朋友的这种方法，来实现一笔普通的转账交易。",
      "p16": "目的是使用手动拼接交易的方式，让你更深刻的理解 CKB cell 的工作原理。",
      "p17": "我们将使用 JSON 格式来手动拼接交易。",
      "transactionInput": {
        "title": "交易的 Input",
        "p1": "下面是钱包 1 的 4 个 live cell，直接把 cell 拖到下面的框中，看看自动生成的 input 是什么样子的。",
        "p2": "你可能看到了，input 中的 cell 是以 previous_output 的形式出现的， 传入的是 tx_hash 和 index 组成的 outpoint，相当于是对 cell 的一个索引，或者像 cell 的一个指针，通过 outpoint 我们找到想要消费的 cell。",
        "p3": "inputs 中还有一个字段叫 since，它是用来控制时间的，我们暂且不必管它。",
        "p4": "除了inputs，还有一个字段叫 cell_deps，它是一笔交易中需要依赖的 cell， 也是以 outpoint 这种索引结果出现的。",
        "p5": "什么是需要依赖的 cell 呢？",
        "p6": "比如在普通的转账交易中，lock 锁需要用到固定的加密算法 SECP256K1_BLAKE160，也就是系统内置的一个智能合约， 这个加密算法的代码存放在某个 cell 中，就需要在 cell_deps 中引用进来， 这样 CKB-VM 虚拟机才能知道从哪里载入代码进行运算。",
        "p7": "通过上文测试链的配置信息，我们很容易找到 cell_deps 中需要传入的参数。"
      },
      "transactionOutput": {
        "title": "交易的 Output",
        "p1": "接下来我们再使用另一个工具，看看生成的output、以及一笔完整的交易长什么样子。",
        "p2": "同样，把钱包 1 的 cell 拖到 input 中。",
        "p3": "output 方框内将马上自动生成一个相同大小的新 cell。",
        "p4": "点击 output 中的设置按钮，可以对新生成的 cell 进行重新分配，包括生成几个 cell、设置每个新 cell 的大小，设置每个 cell 的解锁地址，等等。",
        "p5": "output 占用的 capacity 空间必须小于 input，二者的差值即为矿工能挣到的手续费。",
        "p6": "设置完成后，点击“生成交易”的按钮，就可以看到这笔交易的 JSON 是什么样子了。",
        "p7": "你应该注意到了，交易中的 outputs把新生成的 cell 的信息都写出来了，包括 capactiy 大小、lock 锁等信息。",
        "p8": "但 output 中的 cell 并没有指明 data 的信息，相反，data 被统一挪到了outputs_data 字段中，按顺序对应 outputs 中的 cell。这样做也是出于性能优化角度来设计的。",
        "p9": "最后，一笔完整的交易还包括 version 和 header_deps 两个字段。 前者为版本信息，目前固定设置为 0x0 ，后者暂时不用管，放空就行。"
      },
      "signTheTransaction": {
        "title": "对交易进行签名",
        "p1": "一笔转账拼好之后，需要用相应的私钥，对这笔交易进行签名，表明我们确实是 cell 的主人，有权对这些 cell 执行操作。",
        "p2": "签名将被放入一个新的名为 witnesses 的字段中，作为交易的证明。",
        "p3": "到这里你已经完整了解了一笔交易的过程，我们马上开始动手发交易。"
      },
      "buildATransaction": {
        "title": "构造交易",
        "formTitle": "将下面的交易补充完成",
        "p1": "现在，把下面白框中的空白交易填满。",
        "p2": "把它当作一次练习，自己用手动的方式填写一笔转账交易。",
        "p3": "你可能需要用到查找钱包对应的 live Cell、查看链配置信息(用来填写 cell_deps)、16 进制与 10 进制互相转换这些功能，它们在右手边的工具箱中都可以找到。",
        "p4": "点击右边 👉 Nervos 的 logo，即可打开工具箱。",
        "p5": "填写完成后，点击保存按钮。",
        "p6": "好了，到这里你已经手动把交易全部填好了。",
        "p7": "这时我们已经可以为这笔交易生成一个独一无二的哈希了，也就是 tx_hash 已经可以提前确定出来。"
      },
      "generateTxHash": {
        "title": "生成交易哈希",
        "p1": "点击下面的按钮，试试生成生成交易的哈希。",
        "p2": "尽管这笔交易已经可以提前生成 tx_hash，但它现在仍然是一笔 raw_tx。raw_tx 跟 tx 最大的不同是， tx 会在 witnesses 字段中放入交易的签名。",
        "p3": "事实上，你可以在 witnesses 里放入任何你需要的参数或者证明。而且因为它是一个数组，还可以放入多个证明。 但因为现在我们在尝试的是系统内建的转账交易， 这种交易互相约定会在每一组 witnesses 的第一个位置，放入这样一个结构：",
        "p4": "这一个结构被称为 WitnessArgs。不同的锁会从 WitnessArgs 不同的字段中读取自己需要的签名。 其中，lock 字段是 input 使用到的 lock 锁需要验证的签名。",
        "p5": "在我们现在要实验的普通转账交易中，就是 SECP256K1_BLAKE160 算法需要验证的签名。",
        "p6": "input_type 和 output_type 则是 input 和 output 中 type 锁需要验证的签名，暂时不必管它。",
        "p7": "签名是一个比较繁琐的过程。更详细的技术细节在这里："
      },
      "generateMessage": {
        "title": "生成待签名的message",
        "p1": "现在，为了完成签名，让我们首先为这笔交易生成一个待签名的 message。"
      },
      "completeSining": {
        "title": "开始签名",
        "p1": "有了 message，以及钱包里的私钥，我们就可以计算出签名了。"
      },
      "putBackSignature": {
        "title": "把签名放回到交易中",
        "p1": "把生成的签名填入下面的输入框中，点击按钮，以 witnessArgs 的形式做一遍序列化：",
        "p2": "现在我们可以完善原本的交易了，把序列化好的签名放进 witnesses 字段里："
      },
      "sendTransaction": {
        "title": "发送交易",
        "p1": "最后一步，把交易发送到链上",
        "p2": "最后恭喜你，成功完成了第一小节的内容～",
        "p3": "接下来，我们将会学习如何发送一笔多签的转账交易。"
      }
    },
    "class2": {
      "title": "发送多签交易"
    },
    "class3": {
      "title": "部署一个合约"
    },
    "class4": {
      "title": "部署一个可升级的合约"
    }
  }
}
